ARM GAS  /tmp/ccXdlwYT.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB236:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
ARM GAS  /tmp/ccXdlwYT.s 			page 2


  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** #define N_points 1024
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  45:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** DAC_HandleTypeDef hdac;
  48:Core/Src/main.c **** DMA_HandleTypeDef hdma_dac1;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  51:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** UART_HandleTypeDef huart3;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE BEGIN PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** //__IO uint16_t ADC_number = 0;
  58:Core/Src/main.c **** __IO static uint16_t ADC_res;
  59:Core/Src/main.c **** __IO static uint16_t ADC_array[N_points] = {0,};
  60:Core/Src/main.c **** __IO static uint16_t DAC_array[N_points] = {0,};
  61:Core/Src/main.c **** __IO static uint8_t  Receive_array[255] = {0,};
  62:Core/Src/main.c **** __IO static uint8_t  Transmit_array[N_points] = {0,};
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** __IO uint8_t  _timestep = 1; // (step in us)*2-1, if only not 0.5 (in that case == 0)
  65:Core/Src/main.c **** __IO uint16_t _time_on = 500; // between 0 and 1000
  66:Core/Src/main.c **** __IO uint16_t _cur_max = 2000; // max ~ 3.3V; 2V = 2480 = 0x9B0
  67:Core/Src/main.c **** __IO uint16_t _cur_min = 000; // can't put less than 30 mV = 37 = 0x25
  68:Core/Src/main.c **** __IO uint8_t  _avgn = 1; // It is unused now
  69:Core/Src/main.c **** /* USER CODE END PV */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  72:Core/Src/main.c **** void SystemClock_Config(void);
  73:Core/Src/main.c **** static void MX_GPIO_Init(void);
  74:Core/Src/main.c **** static void MX_DMA_Init(void);
  75:Core/Src/main.c **** static void MX_DAC_Init(void);
  76:Core/Src/main.c **** static void MX_USART3_UART_Init(void);
  77:Core/Src/main.c **** static void MX_TIM1_Init(void);
  78:Core/Src/main.c **** static void MX_TIM2_Init(void);
  79:Core/Src/main.c **** static void MX_ADC1_Init(void);
  80:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  81:Core/Src/main.c **** void prog_init(void);
  82:Core/Src/main.c **** void loop(void);
  83:Core/Src/main.c **** void blink(uint8_t num_blink);
  84:Core/Src/main.c **** uint16_t send_result(uint16_t res);
  85:Core/Src/main.c **** uint16_t read_ADC_values(uint16_t N_of);
  86:Core/Src/main.c **** uint8_t send_back(void);
  87:Core/Src/main.c **** uint8_t measure(void);
  88:Core/Src/main.c **** uint8_t try_to_read(void);
  89:Core/Src/main.c **** volatile uint16_t get_num(char *num_target_array, uint8_t str_len);
ARM GAS  /tmp/ccXdlwYT.s 			page 3


  90:Core/Src/main.c **** volatile uint16_t z_func(char *target_array);
  91:Core/Src/main.c **** /* USER CODE END PFP */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  94:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  95:Core/Src/main.c **** void prog_init(void) {
  96:Core/Src/main.c ****   BSP_LED_Init(LED1);
  97:Core/Src/main.c ****   BSP_LED_Init(LED2);
  98:Core/Src/main.c ****   BSP_LED_Init(LED3);
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   BSP_LED_On(LED3);
 101:Core/Src/main.c ****   HAL_Delay(50);
 102:Core/Src/main.c ****   BSP_LED_Off(LED3);
 103:Core/Src/main.c ****   HAL_Delay(50);
 104:Core/Src/main.c **** }
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** void loop() {
 107:Core/Src/main.c **** //  blink(1);
 108:Core/Src/main.c ****   try_to_read();
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** //  HAL_Delay(1);  
 111:Core/Src/main.c **** }
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** void blink(uint8_t num_blink) {
 114:Core/Src/main.c ****   for (int i = 0; i<num_blink; i++) {
 115:Core/Src/main.c ****     HAL_Delay(125);
 116:Core/Src/main.c ****     BSP_LED_On(LED2);
 117:Core/Src/main.c ****     HAL_Delay(125);
 118:Core/Src/main.c ****     BSP_LED_Off(LED2);
 119:Core/Src/main.c ****   }
 120:Core/Src/main.c ****   BSP_LED_Off(LED1);
 121:Core/Src/main.c ****   BSP_LED_Off(LED3);
 122:Core/Src/main.c **** }
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** uint8_t try_to_read(void) {
 125:Core/Src/main.c ****   Receive_array[0] = 0;
 126:Core/Src/main.c ****   HAL_UART_Receive(&huart3, (uint8_t*) Receive_array, 255, 50);
 127:Core/Src/main.c ****   HAL_Delay(1);
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /*
 130:Core/Src/main.c ****   if ((nekoneko[0] > 2)&&(nekoneko[0] < 40)) {
 131:Core/Src/main.c ****     //HAL_UART_Transmit(&huart3, nekoneko, 255, 50);
 132:Core/Src/main.c ****   }
 133:Core/Src/main.c ****   if (nekoneko[0] == 1) {
 134:Core/Src/main.c **** //    _timestep = 0;
 135:Core/Src/main.c **** //    measure();
 136:Core/Src/main.c **** //    send_back();
 137:Core/Src/main.c ****   }
 138:Core/Src/main.c ****   if (nekoneko[0] == 2) {
 139:Core/Src/main.c **** //    _timestep = 1;
 140:Core/Src/main.c **** //    measure();
 141:Core/Src/main.c **** //    send_back();
 142:Core/Src/main.c ****   }
 143:Core/Src/main.c ****   if (nekoneko[0] == 3) {
 144:Core/Src/main.c **** //    _timestep = 3;
 145:Core/Src/main.c **** //    measure();
 146:Core/Src/main.c **** //    send_back();
ARM GAS  /tmp/ccXdlwYT.s 			page 4


 147:Core/Src/main.c ****   }
 148:Core/Src/main.c **** */
 149:Core/Src/main.c ****   if (Receive_array[0] > 3) {
 150:Core/Src/main.c ****     z_func((char*) Receive_array);
 151:Core/Src/main.c ****     for (int i = 0; i<255; i++) {
 152:Core/Src/main.c ****       Receive_array[i] = 0;
 153:Core/Src/main.c ****     }
 154:Core/Src/main.c ****   }
 155:Core/Src/main.c **** //  measure();
 156:Core/Src/main.c ****   return Receive_array[0];
 157:Core/Src/main.c **** }
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** uint8_t measure(void) {
 160:Core/Src/main.c ****   uint16_t i;
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   MX_TIM2_Init();
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   for (i = 0; i<_time_on; i++) {
 165:Core/Src/main.c ****     DAC_array[i] = _cur_max;
 166:Core/Src/main.c ****   }
 167:Core/Src/main.c ****   for (i = _time_on; i<N_points; i++) {
 168:Core/Src/main.c ****     DAC_array[i] = _cur_min;
 169:Core/Src/main.c ****   }
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****   for (i = 0; i<N_points; i++) {
 172:Core/Src/main.c ****     ADC_array[i] = 0;
 173:Core/Src/main.c ****     Transmit_array[i] = 0xff;
 174:Core/Src/main.c ****   }
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   read_ADC_values(N_points);
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** //  HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 181:Core/Src/main.c **** //  HAL_ADC_Stop(&hadc1);
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   for (i=0; i<N_points; i++) {
 184:Core/Src/main.c ****     Transmit_array[i] = ADC_array[i] >> 1;
 185:Core/Src/main.c **** //    Transmit_array[i*2+1] = ADC_array[i] & 0xFF;
 186:Core/Src/main.c ****   }
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   return 0;
 189:Core/Src/main.c **** }
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** uint8_t send_back(void) {
 192:Core/Src/main.c ****   HAL_UART_Transmit(&huart3, (uint8_t*) Transmit_array, N_points, 0xFF);
 193:Core/Src/main.c ****   return 0;
 194:Core/Src/main.c **** }
 195:Core/Src/main.c **** 
 196:Core/Src/main.c **** uint16_t read_ADC_values(uint16_t N_of) {
 197:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_array, N_points);
 198:Core/Src/main.c ****   HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)&DAC_array, N_points, DAC_ALIGN_12B_R);
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   HAL_Delay(1);
 201:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 202:Core/Src/main.c ****   HAL_Delay(2*_timestep);
 203:Core/Src/main.c ****   HAL_TIM_Base_Stop(&htim2);
ARM GAS  /tmp/ccXdlwYT.s 			page 5


 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   return N_of;
 206:Core/Src/main.c **** }
 207:Core/Src/main.c **** 
 208:Core/Src/main.c **** volatile uint16_t z_func(char *target_array) {
 209:Core/Src/main.c ****   uint8_t num_flag = 0;
 210:Core/Src/main.c ****   uint16_t func_num = 0;
 211:Core/Src/main.c ****   char z1[] = "step";
 212:Core/Src/main.c ****   char z2[] = "imp";
 213:Core/Src/main.c ****   char z3[] = "start";
 214:Core/Src/main.c ****   char z4[] = "loadb";
 215:Core/Src/main.c ****   char z7[] = "cur";
 216:Core/Src/main.c ****   char back[] = "back";
 217:Core/Src/main.c ****   char avgn[] = "avgn";
 218:Core/Src/main.c ****   char def[] = "def";
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   if (strstr(target_array, z1) != NULL) {
 221:Core/Src/main.c ****     func_num = get_num(target_array, 4);
 222:Core/Src/main.c ****     if (func_num > 0) func_num = (func_num*2-1);
 223:Core/Src/main.c ****     _timestep = func_num;
 224:Core/Src/main.c **** //    printf("step %d\n", func_num);
 225:Core/Src/main.c ****     num_flag = 1;
 226:Core/Src/main.c ****     HAL_UART_Transmit(&huart3, (uint8_t*)"s>\n", 3, 0xFF);
 227:Core/Src/main.c ****   }
 228:Core/Src/main.c ****   if (strstr(target_array, z2) != NULL) {
 229:Core/Src/main.c ****     func_num = get_num(target_array, 3);
 230:Core/Src/main.c ****     _time_on = func_num*10;
 231:Core/Src/main.c **** //    printf("imp %d\n", func_num);
 232:Core/Src/main.c ****     num_flag = 1;
 233:Core/Src/main.c ****   }
 234:Core/Src/main.c ****   if (strstr(target_array, z3) != NULL) {
 235:Core/Src/main.c ****     measure();
 236:Core/Src/main.c **** //    printf("start\n");
 237:Core/Src/main.c ****     num_flag = 0;
 238:Core/Src/main.c ****   }
 239:Core/Src/main.c ****   if (strstr(target_array, z4) != NULL) {
 240:Core/Src/main.c ****     send_back();
 241:Core/Src/main.c **** //    printf("loadb\n");
 242:Core/Src/main.c ****     num_flag = 0;
 243:Core/Src/main.c ****   }
 244:Core/Src/main.c ****   if (strstr(target_array, z7) != NULL) {
 245:Core/Src/main.c ****     func_num = get_num(target_array, 3);
 246:Core/Src/main.c ****     _cur_max = func_num*(2*40.96/3.3);
 247:Core/Src/main.c **** //    printf("cur %d\n", func_num);
 248:Core/Src/main.c ****     num_flag = 1;
 249:Core/Src/main.c ****   }
 250:Core/Src/main.c ****   if (strstr(target_array, back) != NULL) {
 251:Core/Src/main.c ****     func_num = get_num(target_array, 4);
 252:Core/Src/main.c ****     _cur_min = func_num*(2*40.96/3.3);
 253:Core/Src/main.c **** //    printf("cur %d\n", func_num);
 254:Core/Src/main.c ****     num_flag = 1;
 255:Core/Src/main.c ****   }
 256:Core/Src/main.c ****   if (strstr(target_array, avgn) != NULL) {
 257:Core/Src/main.c ****     func_num = get_num(target_array, 4);
 258:Core/Src/main.c ****     _avgn = func_num;
 259:Core/Src/main.c **** //    printf("cur %d\n", func_num);
 260:Core/Src/main.c ****     num_flag = 1;
ARM GAS  /tmp/ccXdlwYT.s 			page 6


 261:Core/Src/main.c ****   }
 262:Core/Src/main.c ****   if (strstr(target_array, def) != NULL) {
 263:Core/Src/main.c ****     _timestep = 1;
 264:Core/Src/main.c ****     _cur_max = 12.5*(2*40.96/3.3);
 265:Core/Src/main.c ****     _time_on = 500;
 266:Core/Src/main.c **** //    printf("def\n");
 267:Core/Src/main.c ****     num_flag = 0;
 268:Core/Src/main.c ****   }
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   if (num_flag == 0) {
 271:Core/Src/main.c ****     return 0;
 272:Core/Src/main.c ****   } else {
 273:Core/Src/main.c ****     return func_num;
 274:Core/Src/main.c ****   }
 275:Core/Src/main.c **** }
 276:Core/Src/main.c **** 
 277:Core/Src/main.c **** volatile uint16_t get_num(char *num_target_array, uint8_t str_len) {
 278:Core/Src/main.c ****   uint8_t trr = strlen(num_target_array);
 279:Core/Src/main.c ****   uint8_t array_end = trr;
 280:Core/Src/main.c ****   char only_num[255] = "";
 281:Core/Src/main.c ****   uint16_t num_in_func;
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   for (int i=trr-1; i>0; i--) {
 284:Core/Src/main.c ****     if ((num_target_array[i] == 0x0D)||(num_target_array[i] == 0x0A)) (array_end = i);
 285:Core/Src/main.c ****   }
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   if (strstr(num_target_array, "step0.5") != NULL) {
 288:Core/Src/main.c ****     num_in_func = 0;
 289:Core/Src/main.c ****   } else {
 290:Core/Src/main.c ****     for (int i = str_len; i < array_end; i++) {
 291:Core/Src/main.c ****       only_num[i-str_len] = num_target_array[i];
 292:Core/Src/main.c ****     }
 293:Core/Src/main.c ****     num_in_func = atoi(only_num);
 294:Core/Src/main.c ****   }
 295:Core/Src/main.c ****   return num_in_func;
 296:Core/Src/main.c **** }
 297:Core/Src/main.c **** 
 298:Core/Src/main.c **** /* USER CODE END 0 */
 299:Core/Src/main.c **** 
 300:Core/Src/main.c **** /**
 301:Core/Src/main.c ****   * @brief  The application entry point.
 302:Core/Src/main.c ****   * @retval int
 303:Core/Src/main.c ****   */
 304:Core/Src/main.c **** int main(void)
 305:Core/Src/main.c **** {
 306:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* USER CODE END 1 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 313:Core/Src/main.c ****   HAL_Init();
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 316:Core/Src/main.c **** 
 317:Core/Src/main.c ****   prog_init();
ARM GAS  /tmp/ccXdlwYT.s 			page 7


 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* USER CODE END Init */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /* Configure the system clock */
 322:Core/Src/main.c ****   SystemClock_Config();
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   /* USER CODE END SysInit */
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   /* Initialize all configured peripherals */
 329:Core/Src/main.c ****   MX_GPIO_Init();
 330:Core/Src/main.c ****   MX_DMA_Init();
 331:Core/Src/main.c ****   MX_DAC_Init();
 332:Core/Src/main.c ****   MX_USART3_UART_Init();
 333:Core/Src/main.c ****   MX_TIM1_Init();
 334:Core/Src/main.c ****   MX_TIM2_Init();
 335:Core/Src/main.c ****   MX_ADC1_Init();
 336:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 337:Core/Src/main.c ****   HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 338:Core/Src/main.c ****   measure();
 339:Core/Src/main.c **** //  read_ADC_values(1000);
 340:Core/Src/main.c ****   /* USER CODE END 2 */
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /* Infinite loop */
 343:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 344:Core/Src/main.c ****   while (1) {
 345:Core/Src/main.c ****     loop();
 346:Core/Src/main.c ****     /* USER CODE END WHILE */
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 349:Core/Src/main.c ****   }
 350:Core/Src/main.c ****   /* USER CODE END 3 */
 351:Core/Src/main.c **** }
 352:Core/Src/main.c **** 
 353:Core/Src/main.c **** /**
 354:Core/Src/main.c ****   * @brief System Clock Configuration
 355:Core/Src/main.c ****   * @retval None
 356:Core/Src/main.c ****   */
 357:Core/Src/main.c **** void SystemClock_Config(void)
 358:Core/Src/main.c **** {
 359:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 360:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 363:Core/Src/main.c ****   */
 364:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 365:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 366:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 367:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 368:Core/Src/main.c ****   */
 369:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 370:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 371:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 372:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 373:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 374:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
ARM GAS  /tmp/ccXdlwYT.s 			page 8


 375:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 376:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 377:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 378:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 379:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 380:Core/Src/main.c ****   {
 381:Core/Src/main.c ****     Error_Handler();
 382:Core/Src/main.c ****   }
 383:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 384:Core/Src/main.c ****   */
 385:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 386:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 387:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 388:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 389:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 390:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 393:Core/Src/main.c ****   {
 394:Core/Src/main.c ****     Error_Handler();
 395:Core/Src/main.c ****   }
 396:Core/Src/main.c **** }
 397:Core/Src/main.c **** 
 398:Core/Src/main.c **** /**
 399:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 400:Core/Src/main.c ****   * @param None
 401:Core/Src/main.c ****   * @retval None
 402:Core/Src/main.c ****   */
 403:Core/Src/main.c **** static void MX_ADC1_Init(void)
 404:Core/Src/main.c **** {
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 407:Core/Src/main.c ****   // Input for ADC_Channel_10 is PC0
 408:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 413:Core/Src/main.c **** 
 414:Core/Src/main.c ****   /*
 415:Core/Src/main.c ****   Try next to increase ADC speed:
 416:Core/Src/main.c ****   static void MX_ADC1_Init(uint8_t timestep)
 417:Core/Src/main.c ****   
 418:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 419:Core/Src/main.c ****   or add nest strings instead auto "preacaler" string
 420:Core/Src/main.c ****   */
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****   if (_timestep == 0) {
 423:Core/Src/main.c ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 424:Core/Src/main.c ****   } else {
 425:Core/Src/main.c ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 426:Core/Src/main.c ****   }
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 429:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 430:Core/Src/main.c ****   */
 431:Core/Src/main.c ****   hadc1.Instance = ADC1;
ARM GAS  /tmp/ccXdlwYT.s 			page 9


 432:Core/Src/main.c **** //  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 433:Core/Src/main.c **** //  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 434:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 435:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 436:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 437:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 438:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 439:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 440:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 441:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 442:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 443:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 444:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 445:Core/Src/main.c ****   {
 446:Core/Src/main.c ****     Error_Handler();
 447:Core/Src/main.c ****   }
 448:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 449:Core/Src/main.c ****   */
 450:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_10;
 451:Core/Src/main.c ****   sConfig.Rank = 1;
 452:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 453:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 454:Core/Src/main.c ****   {
 455:Core/Src/main.c ****     Error_Handler();
 456:Core/Src/main.c ****   }
 457:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 460:Core/Src/main.c **** 
 461:Core/Src/main.c **** }
 462:Core/Src/main.c **** 
 463:Core/Src/main.c **** /**
 464:Core/Src/main.c ****   * @brief DAC Initialization Function
 465:Core/Src/main.c ****   * @param None
 466:Core/Src/main.c ****   * @retval None
 467:Core/Src/main.c ****   */
 468:Core/Src/main.c **** static void MX_DAC_Init(void)
 469:Core/Src/main.c **** {
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /* USER CODE BEGIN DAC_Init 0 */
 472:Core/Src/main.c ****   // Output for DAC_channel_1 is PA4
 473:Core/Src/main.c ****   /* USER CODE END DAC_Init 0 */
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   DAC_ChannelConfTypeDef sConfig = {0};
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /* USER CODE BEGIN DAC_Init 1 */
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /* USER CODE END DAC_Init 1 */
 480:Core/Src/main.c ****   /** DAC Initialization
 481:Core/Src/main.c ****   */
 482:Core/Src/main.c ****   hdac.Instance = DAC;
 483:Core/Src/main.c ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 484:Core/Src/main.c ****   {
 485:Core/Src/main.c ****     Error_Handler();
 486:Core/Src/main.c ****   }
 487:Core/Src/main.c ****   /** DAC channel OUT1 config
 488:Core/Src/main.c ****   */
ARM GAS  /tmp/ccXdlwYT.s 			page 10


 489:Core/Src/main.c ****   sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 490:Core/Src/main.c ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 491:Core/Src/main.c **** //  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 492:Core/Src/main.c ****   if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 493:Core/Src/main.c ****   {
 494:Core/Src/main.c ****     Error_Handler();
 495:Core/Src/main.c ****   }
 496:Core/Src/main.c ****   /* USER CODE BEGIN DAC_Init 2 */
 497:Core/Src/main.c ****   /* USER CODE END DAC_Init 2 */
 498:Core/Src/main.c **** 
 499:Core/Src/main.c **** }
 500:Core/Src/main.c **** 
 501:Core/Src/main.c **** /**
 502:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 503:Core/Src/main.c ****   * @param None
 504:Core/Src/main.c ****   * @retval None
 505:Core/Src/main.c ****   */
 506:Core/Src/main.c **** static void MX_TIM1_Init(void)
 507:Core/Src/main.c **** {
 508:Core/Src/main.c **** 
 509:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 510:Core/Src/main.c **** 
 511:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 514:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 517:Core/Src/main.c **** 
 518:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 519:Core/Src/main.c ****   htim1.Instance = TIM1;
 520:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 521:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 522:Core/Src/main.c ****   htim1.Init.Period = 95;
 523:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 524:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 525:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 526:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 527:Core/Src/main.c ****   {
 528:Core/Src/main.c ****     Error_Handler();
 529:Core/Src/main.c ****   }
 530:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 531:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 532:Core/Src/main.c ****   {
 533:Core/Src/main.c ****     Error_Handler();
 534:Core/Src/main.c ****   }
 535:Core/Src/main.c ****   if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 536:Core/Src/main.c ****   {
 537:Core/Src/main.c ****     Error_Handler();
 538:Core/Src/main.c ****   }
 539:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 540:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 541:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 542:Core/Src/main.c ****   {
 543:Core/Src/main.c ****     Error_Handler();
 544:Core/Src/main.c ****   }
 545:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
ARM GAS  /tmp/ccXdlwYT.s 			page 11


 546:Core/Src/main.c **** 
 547:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 548:Core/Src/main.c **** 
 549:Core/Src/main.c **** }
 550:Core/Src/main.c **** 
 551:Core/Src/main.c **** /**
 552:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 553:Core/Src/main.c ****   * @param None
 554:Core/Src/main.c ****   * @retval None
 555:Core/Src/main.c ****   */
 556:Core/Src/main.c **** static void MX_TIM2_Init(void)
 557:Core/Src/main.c **** {
 558:Core/Src/main.c **** 
 559:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 560:Core/Src/main.c **** 
 561:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 562:Core/Src/main.c **** 
 563:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 564:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 565:Core/Src/main.c **** 
 566:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 567:Core/Src/main.c ****   MX_ADC1_Init();
 568:Core/Src/main.c ****   // also put it instead auto "prescaler" string
 569:Core/Src/main.c ****   htim2.Init.Prescaler = _timestep;
 570:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 571:Core/Src/main.c **** 
 572:Core/Src/main.c ****   htim2.Instance = TIM2;
 573:Core/Src/main.c **** //  htim2.Init.Prescaler = timestep;
 574:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 575:Core/Src/main.c ****   htim2.Init.Period = 47;
 576:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 577:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 578:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 579:Core/Src/main.c ****   {
 580:Core/Src/main.c ****     Error_Handler();
 581:Core/Src/main.c ****   }
 582:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 583:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 584:Core/Src/main.c ****   {
 585:Core/Src/main.c ****     Error_Handler();
 586:Core/Src/main.c ****   }
 587:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 588:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 589:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 590:Core/Src/main.c ****   {
 591:Core/Src/main.c ****     Error_Handler();
 592:Core/Src/main.c ****   }
 593:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 594:Core/Src/main.c **** 
 595:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 596:Core/Src/main.c **** 
 597:Core/Src/main.c **** }
 598:Core/Src/main.c **** 
 599:Core/Src/main.c **** /**
 600:Core/Src/main.c ****   * @brief USART3 Initialization Function
 601:Core/Src/main.c ****   * @param None
 602:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/ccXdlwYT.s 			page 12


 603:Core/Src/main.c ****   */
 604:Core/Src/main.c **** static void MX_USART3_UART_Init(void)
 605:Core/Src/main.c **** {
 606:Core/Src/main.c **** 
 607:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 0 */
 608:Core/Src/main.c **** 
 609:Core/Src/main.c ****   // if we need to connect via Unix-based system
 610:Core/Src/main.c ****   // stty 115200 -F /dev/ttyACM0 -raw
 611:Core/Src/main.c ****   // cat /dev/ttyACM0 | hexdump -C
 612:Core/Src/main.c ****   // echo $'\x01' > /dev/ttyACM0
 613:Core/Src/main.c **** 
 614:Core/Src/main.c ****   /* USER CODE END USART3_Init 0 */
 615:Core/Src/main.c **** 
 616:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 1 */
 617:Core/Src/main.c **** 
 618:Core/Src/main.c ****   /* USER CODE END USART3_Init 1 */
 619:Core/Src/main.c ****   huart3.Instance = USART3;
 620:Core/Src/main.c **** //  huart3.Init.BaudRate = 115200;
 621:Core/Src/main.c ****   huart3.Init.BaudRate = 57600;
 622:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 623:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 624:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 625:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 626:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 627:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 628:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 629:Core/Src/main.c ****   {
 630:Core/Src/main.c ****     Error_Handler();
 631:Core/Src/main.c ****   }
 632:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 2 */
 633:Core/Src/main.c **** 
 634:Core/Src/main.c ****   /* USER CODE END USART3_Init 2 */
 635:Core/Src/main.c **** 
 636:Core/Src/main.c **** }
 637:Core/Src/main.c **** 
 638:Core/Src/main.c **** /**
 639:Core/Src/main.c ****   * Enable DMA controller clock
 640:Core/Src/main.c ****   */
 641:Core/Src/main.c **** static void MX_DMA_Init(void)
 642:Core/Src/main.c **** {
 643:Core/Src/main.c **** 
 644:Core/Src/main.c ****   /* DMA controller clock enable */
 645:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 646:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 647:Core/Src/main.c **** 
 648:Core/Src/main.c ****   /* DMA interrupt init */
 649:Core/Src/main.c ****   /* DMA1_Stream5_IRQn interrupt configuration */
 650:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 651:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 652:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 653:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 654:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 655:Core/Src/main.c **** 
 656:Core/Src/main.c **** }
 657:Core/Src/main.c **** 
 658:Core/Src/main.c **** /**
 659:Core/Src/main.c ****   * @brief GPIO Initialization Function
ARM GAS  /tmp/ccXdlwYT.s 			page 13


 660:Core/Src/main.c ****   * @param None
 661:Core/Src/main.c ****   * @retval None
 662:Core/Src/main.c ****   */
 663:Core/Src/main.c **** static void MX_GPIO_Init(void)
 664:Core/Src/main.c **** {
  27              		.loc 1 664 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 88B0     		sub	sp, sp, #32
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 40
 665:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 665 0
  40 0004 0022     		movs	r2, #0
  41 0006 0392     		str	r2, [sp, #12]
  42 0008 0492     		str	r2, [sp, #16]
  43 000a 0592     		str	r2, [sp, #20]
  44 000c 0692     		str	r2, [sp, #24]
  45 000e 0792     		str	r2, [sp, #28]
  46              	.LBB4:
 666:Core/Src/main.c **** 
 667:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 668:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 668 0
  48 0010 0092     		str	r2, [sp]
  49 0012 184B     		ldr	r3, .L3
  50 0014 196B     		ldr	r1, [r3, #48]
  51 0016 41F00401 		orr	r1, r1, #4
  52 001a 1963     		str	r1, [r3, #48]
  53 001c 196B     		ldr	r1, [r3, #48]
  54 001e 01F00401 		and	r1, r1, #4
  55 0022 0091     		str	r1, [sp]
  56 0024 0099     		ldr	r1, [sp]
  57              	.LBE4:
  58              	.LBB5:
 669:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  59              		.loc 1 669 0
  60 0026 0192     		str	r2, [sp, #4]
  61 0028 196B     		ldr	r1, [r3, #48]
  62 002a 41F00101 		orr	r1, r1, #1
  63 002e 1963     		str	r1, [r3, #48]
  64 0030 196B     		ldr	r1, [r3, #48]
  65 0032 01F00101 		and	r1, r1, #1
  66 0036 0191     		str	r1, [sp, #4]
  67 0038 0199     		ldr	r1, [sp, #4]
  68              	.LBE5:
  69              	.LBB6:
 670:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  70              		.loc 1 670 0
  71 003a 0292     		str	r2, [sp, #8]
  72 003c 196B     		ldr	r1, [r3, #48]
ARM GAS  /tmp/ccXdlwYT.s 			page 14


  73 003e 41F00801 		orr	r1, r1, #8
  74 0042 1963     		str	r1, [r3, #48]
  75 0044 1B6B     		ldr	r3, [r3, #48]
  76 0046 03F00803 		and	r3, r3, #8
  77 004a 0293     		str	r3, [sp, #8]
  78 004c 029B     		ldr	r3, [sp, #8]
  79              	.LBE6:
 671:Core/Src/main.c **** 
 672:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 673:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
  80              		.loc 1 673 0
  81 004e 0A4C     		ldr	r4, .L3+4
  82 0050 4021     		movs	r1, #64
  83 0052 2046     		mov	r0, r4
  84 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
  85              	.LVL0:
 674:Core/Src/main.c **** 
 675:Core/Src/main.c ****   /*Configure GPIO pin : PA6 */
 676:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_6;
  86              		.loc 1 676 0
  87 0058 4023     		movs	r3, #64
  88 005a 0393     		str	r3, [sp, #12]
 677:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  89              		.loc 1 677 0
  90 005c 0123     		movs	r3, #1
  91 005e 0493     		str	r3, [sp, #16]
 678:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  92              		.loc 1 678 0
  93 0060 0223     		movs	r3, #2
  94 0062 0593     		str	r3, [sp, #20]
 679:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  95              		.loc 1 679 0
  96 0064 0323     		movs	r3, #3
  97 0066 0693     		str	r3, [sp, #24]
 680:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  98              		.loc 1 680 0
  99 0068 03A9     		add	r1, sp, #12
 100 006a 2046     		mov	r0, r4
 101 006c FFF7FEFF 		bl	HAL_GPIO_Init
 102              	.LVL1:
 681:Core/Src/main.c **** 
 682:Core/Src/main.c **** }
 103              		.loc 1 682 0
 104 0070 08B0     		add	sp, sp, #32
 105              	.LCFI2:
 106              		.cfi_def_cfa_offset 8
 107              		@ sp needed
 108 0072 10BD     		pop	{r4, pc}
 109              	.L4:
 110              		.align	2
 111              	.L3:
 112 0074 00380240 		.word	1073887232
 113 0078 00000240 		.word	1073872896
 114              		.cfi_endproc
 115              	.LFE236:
 117              		.section	.text.MX_DMA_Init,"ax",%progbits
 118              		.align	1
ARM GAS  /tmp/ccXdlwYT.s 			page 15


 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu fpv4-sp-d16
 124              	MX_DMA_Init:
 125              	.LFB235:
 642:Core/Src/main.c **** 
 126              		.loc 1 642 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 8
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130 0000 10B5     		push	{r4, lr}
 131              	.LCFI3:
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 4, -8
 134              		.cfi_offset 14, -4
 135 0002 82B0     		sub	sp, sp, #8
 136              	.LCFI4:
 137              		.cfi_def_cfa_offset 16
 138              	.LBB7:
 645:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 139              		.loc 1 645 0
 140 0004 0024     		movs	r4, #0
 141 0006 0094     		str	r4, [sp]
 142 0008 124B     		ldr	r3, .L7
 143 000a 1A6B     		ldr	r2, [r3, #48]
 144 000c 42F40012 		orr	r2, r2, #2097152
 145 0010 1A63     		str	r2, [r3, #48]
 146 0012 1A6B     		ldr	r2, [r3, #48]
 147 0014 02F40012 		and	r2, r2, #2097152
 148 0018 0092     		str	r2, [sp]
 149 001a 009A     		ldr	r2, [sp]
 150              	.LBE7:
 151              	.LBB8:
 646:Core/Src/main.c **** 
 152              		.loc 1 646 0
 153 001c 0194     		str	r4, [sp, #4]
 154 001e 1A6B     		ldr	r2, [r3, #48]
 155 0020 42F48002 		orr	r2, r2, #4194304
 156 0024 1A63     		str	r2, [r3, #48]
 157 0026 1B6B     		ldr	r3, [r3, #48]
 158 0028 03F48003 		and	r3, r3, #4194304
 159 002c 0193     		str	r3, [sp, #4]
 160 002e 019B     		ldr	r3, [sp, #4]
 161              	.LBE8:
 650:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 162              		.loc 1 650 0
 163 0030 2246     		mov	r2, r4
 164 0032 2146     		mov	r1, r4
 165 0034 1020     		movs	r0, #16
 166 0036 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 167              	.LVL2:
 651:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 168              		.loc 1 651 0
 169 003a 1020     		movs	r0, #16
 170 003c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 171              	.LVL3:
ARM GAS  /tmp/ccXdlwYT.s 			page 16


 653:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 172              		.loc 1 653 0
 173 0040 2246     		mov	r2, r4
 174 0042 2146     		mov	r1, r4
 175 0044 3820     		movs	r0, #56
 176 0046 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 177              	.LVL4:
 654:Core/Src/main.c **** 
 178              		.loc 1 654 0
 179 004a 3820     		movs	r0, #56
 180 004c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 181              	.LVL5:
 656:Core/Src/main.c **** 
 182              		.loc 1 656 0
 183 0050 02B0     		add	sp, sp, #8
 184              	.LCFI5:
 185              		.cfi_def_cfa_offset 8
 186              		@ sp needed
 187 0052 10BD     		pop	{r4, pc}
 188              	.L8:
 189              		.align	2
 190              	.L7:
 191 0054 00380240 		.word	1073887232
 192              		.cfi_endproc
 193              	.LFE235:
 195              		.section	.text.prog_init,"ax",%progbits
 196              		.align	1
 197              		.global	prog_init
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
 203              	prog_init:
 204              	.LFB219:
  95:Core/Src/main.c ****   BSP_LED_Init(LED1);
 205              		.loc 1 95 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 08B5     		push	{r3, lr}
 210              	.LCFI6:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 3, -8
 213              		.cfi_offset 14, -4
  96:Core/Src/main.c ****   BSP_LED_Init(LED2);
 214              		.loc 1 96 0
 215 0002 0020     		movs	r0, #0
 216 0004 FFF7FEFF 		bl	BSP_LED_Init
 217              	.LVL6:
  97:Core/Src/main.c ****   BSP_LED_Init(LED3);
 218              		.loc 1 97 0
 219 0008 0120     		movs	r0, #1
 220 000a FFF7FEFF 		bl	BSP_LED_Init
 221              	.LVL7:
  98:Core/Src/main.c **** 
 222              		.loc 1 98 0
 223 000e 0220     		movs	r0, #2
ARM GAS  /tmp/ccXdlwYT.s 			page 17


 224 0010 FFF7FEFF 		bl	BSP_LED_Init
 225              	.LVL8:
 100:Core/Src/main.c ****   HAL_Delay(50);
 226              		.loc 1 100 0
 227 0014 0220     		movs	r0, #2
 228 0016 FFF7FEFF 		bl	BSP_LED_On
 229              	.LVL9:
 101:Core/Src/main.c ****   BSP_LED_Off(LED3);
 230              		.loc 1 101 0
 231 001a 3220     		movs	r0, #50
 232 001c FFF7FEFF 		bl	HAL_Delay
 233              	.LVL10:
 102:Core/Src/main.c ****   HAL_Delay(50);
 234              		.loc 1 102 0
 235 0020 0220     		movs	r0, #2
 236 0022 FFF7FEFF 		bl	BSP_LED_Off
 237              	.LVL11:
 103:Core/Src/main.c **** }
 238              		.loc 1 103 0
 239 0026 3220     		movs	r0, #50
 240 0028 FFF7FEFF 		bl	HAL_Delay
 241              	.LVL12:
 104:Core/Src/main.c **** 
 242              		.loc 1 104 0
 243 002c 08BD     		pop	{r3, pc}
 244              		.cfi_endproc
 245              	.LFE219:
 247              		.section	.text.blink,"ax",%progbits
 248              		.align	1
 249              		.global	blink
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	blink:
 256              	.LFB221:
 113:Core/Src/main.c ****   for (int i = 0; i<num_blink; i++) {
 257              		.loc 1 113 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              	.LVL13:
 262 0000 38B5     		push	{r3, r4, r5, lr}
 263              	.LCFI7:
 264              		.cfi_def_cfa_offset 16
 265              		.cfi_offset 3, -16
 266              		.cfi_offset 4, -12
 267              		.cfi_offset 5, -8
 268              		.cfi_offset 14, -4
 269 0002 0546     		mov	r5, r0
 270              	.LVL14:
 271              	.LBB9:
 114:Core/Src/main.c ****     HAL_Delay(125);
 272              		.loc 1 114 0
 273 0004 0024     		movs	r4, #0
 274 0006 0CE0     		b	.L12
 275              	.LVL15:
ARM GAS  /tmp/ccXdlwYT.s 			page 18


 276              	.L13:
 115:Core/Src/main.c ****     BSP_LED_On(LED2);
 277              		.loc 1 115 0 discriminator 3
 278 0008 7D20     		movs	r0, #125
 279 000a FFF7FEFF 		bl	HAL_Delay
 280              	.LVL16:
 116:Core/Src/main.c ****     HAL_Delay(125);
 281              		.loc 1 116 0 discriminator 3
 282 000e 0120     		movs	r0, #1
 283 0010 FFF7FEFF 		bl	BSP_LED_On
 284              	.LVL17:
 117:Core/Src/main.c ****     BSP_LED_Off(LED2);
 285              		.loc 1 117 0 discriminator 3
 286 0014 7D20     		movs	r0, #125
 287 0016 FFF7FEFF 		bl	HAL_Delay
 288              	.LVL18:
 118:Core/Src/main.c ****   }
 289              		.loc 1 118 0 discriminator 3
 290 001a 0120     		movs	r0, #1
 291 001c FFF7FEFF 		bl	BSP_LED_Off
 292              	.LVL19:
 114:Core/Src/main.c ****     HAL_Delay(125);
 293              		.loc 1 114 0 discriminator 3
 294 0020 0134     		adds	r4, r4, #1
 295              	.LVL20:
 296              	.L12:
 114:Core/Src/main.c ****     HAL_Delay(125);
 297              		.loc 1 114 0 is_stmt 0 discriminator 1
 298 0022 A542     		cmp	r5, r4
 299 0024 F0DC     		bgt	.L13
 300              	.LBE9:
 120:Core/Src/main.c ****   BSP_LED_Off(LED3);
 301              		.loc 1 120 0 is_stmt 1
 302 0026 0020     		movs	r0, #0
 303 0028 FFF7FEFF 		bl	BSP_LED_Off
 304              	.LVL21:
 121:Core/Src/main.c **** }
 305              		.loc 1 121 0
 306 002c 0220     		movs	r0, #2
 307 002e FFF7FEFF 		bl	BSP_LED_Off
 308              	.LVL22:
 122:Core/Src/main.c **** 
 309              		.loc 1 122 0
 310 0032 38BD     		pop	{r3, r4, r5, pc}
 311              		.cfi_endproc
 312              	.LFE221:
 314              		.section	.text.send_back,"ax",%progbits
 315              		.align	1
 316              		.global	send_back
 317              		.syntax unified
 318              		.thumb
 319              		.thumb_func
 320              		.fpu fpv4-sp-d16
 322              	send_back:
 323              	.LFB224:
 191:Core/Src/main.c ****   HAL_UART_Transmit(&huart3, (uint8_t*) Transmit_array, N_points, 0xFF);
 324              		.loc 1 191 0
ARM GAS  /tmp/ccXdlwYT.s 			page 19


 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328 0000 08B5     		push	{r3, lr}
 329              	.LCFI8:
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 3, -8
 332              		.cfi_offset 14, -4
 192:Core/Src/main.c ****   return 0;
 333              		.loc 1 192 0
 334 0002 FF23     		movs	r3, #255
 335 0004 4FF48062 		mov	r2, #1024
 336 0008 0249     		ldr	r1, .L17
 337 000a 0348     		ldr	r0, .L17+4
 338 000c FFF7FEFF 		bl	HAL_UART_Transmit
 339              	.LVL23:
 194:Core/Src/main.c **** 
 340              		.loc 1 194 0
 341 0010 0020     		movs	r0, #0
 342 0012 08BD     		pop	{r3, pc}
 343              	.L18:
 344              		.align	2
 345              	.L17:
 346 0014 00000000 		.word	.LANCHOR0
 347 0018 00000000 		.word	huart3
 348              		.cfi_endproc
 349              	.LFE224:
 351              		.section	.text.read_ADC_values,"ax",%progbits
 352              		.align	1
 353              		.global	read_ADC_values
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu fpv4-sp-d16
 359              	read_ADC_values:
 360              	.LFB225:
 196:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_array, N_points);
 361              		.loc 1 196 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              	.LVL24:
 366 0000 30B5     		push	{r4, r5, lr}
 367              	.LCFI9:
 368              		.cfi_def_cfa_offset 12
 369              		.cfi_offset 4, -12
 370              		.cfi_offset 5, -8
 371              		.cfi_offset 14, -4
 372 0002 83B0     		sub	sp, sp, #12
 373              	.LCFI10:
 374              		.cfi_def_cfa_offset 24
 375 0004 0546     		mov	r5, r0
 197:Core/Src/main.c ****   HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)&DAC_array, N_points, DAC_ALIGN_12B_R);
 376              		.loc 1 197 0
 377 0006 4FF48062 		mov	r2, #1024
 378 000a 0F49     		ldr	r1, .L21
 379 000c 0F48     		ldr	r0, .L21+4
ARM GAS  /tmp/ccXdlwYT.s 			page 20


 380              	.LVL25:
 381 000e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 382              	.LVL26:
 198:Core/Src/main.c **** 
 383              		.loc 1 198 0
 384 0012 0021     		movs	r1, #0
 385 0014 0091     		str	r1, [sp]
 386 0016 4FF48063 		mov	r3, #1024
 387 001a 0D4A     		ldr	r2, .L21+8
 388 001c 0D48     		ldr	r0, .L21+12
 389 001e FFF7FEFF 		bl	HAL_DAC_Start_DMA
 390              	.LVL27:
 200:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 391              		.loc 1 200 0
 392 0022 0120     		movs	r0, #1
 393 0024 FFF7FEFF 		bl	HAL_Delay
 394              	.LVL28:
 201:Core/Src/main.c ****   HAL_Delay(2*_timestep);
 395              		.loc 1 201 0
 396 0028 0B4C     		ldr	r4, .L21+16
 397 002a 2046     		mov	r0, r4
 398 002c FFF7FEFF 		bl	HAL_TIM_Base_Start
 399              	.LVL29:
 202:Core/Src/main.c ****   HAL_TIM_Base_Stop(&htim2);
 400              		.loc 1 202 0
 401 0030 0A4B     		ldr	r3, .L21+20
 402 0032 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 403 0034 4000     		lsls	r0, r0, #1
 404 0036 FFF7FEFF 		bl	HAL_Delay
 405              	.LVL30:
 203:Core/Src/main.c **** 
 406              		.loc 1 203 0
 407 003a 2046     		mov	r0, r4
 408 003c FFF7FEFF 		bl	HAL_TIM_Base_Stop
 409              	.LVL31:
 206:Core/Src/main.c **** 
 410              		.loc 1 206 0
 411 0040 2846     		mov	r0, r5
 412 0042 03B0     		add	sp, sp, #12
 413              	.LCFI11:
 414              		.cfi_def_cfa_offset 12
 415              		@ sp needed
 416 0044 30BD     		pop	{r4, r5, pc}
 417              	.L22:
 418 0046 00BF     		.align	2
 419              	.L21:
 420 0048 00000000 		.word	.LANCHOR1
 421 004c 00000000 		.word	hadc1
 422 0050 00000000 		.word	.LANCHOR2
 423 0054 00000000 		.word	hdac
 424 0058 00000000 		.word	htim2
 425 005c 00000000 		.word	.LANCHOR3
 426              		.cfi_endproc
 427              	.LFE225:
 429              		.section	.text.get_num,"ax",%progbits
 430              		.align	1
 431              		.global	get_num
ARM GAS  /tmp/ccXdlwYT.s 			page 21


 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu fpv4-sp-d16
 437              	get_num:
 438              	.LFB227:
 277:Core/Src/main.c ****   uint8_t trr = strlen(num_target_array);
 439              		.loc 1 277 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 256
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              	.LVL32:
 444 0000 70B5     		push	{r4, r5, r6, lr}
 445              	.LCFI12:
 446              		.cfi_def_cfa_offset 16
 447              		.cfi_offset 4, -16
 448              		.cfi_offset 5, -12
 449              		.cfi_offset 6, -8
 450              		.cfi_offset 14, -4
 451 0002 C0B0     		sub	sp, sp, #256
 452              	.LCFI13:
 453              		.cfi_def_cfa_offset 272
 454 0004 0546     		mov	r5, r0
 455 0006 0C46     		mov	r4, r1
 278:Core/Src/main.c ****   uint8_t array_end = trr;
 456              		.loc 1 278 0
 457 0008 FFF7FEFF 		bl	strlen
 458              	.LVL33:
 459 000c C6B2     		uxtb	r6, r0
 460              	.LVL34:
 280:Core/Src/main.c ****   uint16_t num_in_func;
 461              		.loc 1 280 0
 462 000e 0021     		movs	r1, #0
 463 0010 0091     		str	r1, [sp]
 464 0012 FB22     		movs	r2, #251
 465 0014 01A8     		add	r0, sp, #4
 466 0016 FFF7FEFF 		bl	memset
 467              	.LVL35:
 468              	.LBB10:
 283:Core/Src/main.c ****     if ((num_target_array[i] == 0x0D)||(num_target_array[i] == 0x0A)) (array_end = i);
 469              		.loc 1 283 0
 470 001a 731E     		subs	r3, r6, #1
 471              	.LVL36:
 472 001c 01E0     		b	.L24
 473              	.LVL37:
 474              	.L25:
 284:Core/Src/main.c ****   }
 475              		.loc 1 284 0 discriminator 3
 476 001e DEB2     		uxtb	r6, r3
 477              	.LVL38:
 478              	.L26:
 283:Core/Src/main.c ****     if ((num_target_array[i] == 0x0D)||(num_target_array[i] == 0x0A)) (array_end = i);
 479              		.loc 1 283 0 discriminator 2
 480 0020 013B     		subs	r3, r3, #1
 481              	.LVL39:
 482              	.L24:
 283:Core/Src/main.c ****     if ((num_target_array[i] == 0x0D)||(num_target_array[i] == 0x0A)) (array_end = i);
ARM GAS  /tmp/ccXdlwYT.s 			page 22


 483              		.loc 1 283 0 is_stmt 0 discriminator 1
 484 0022 002B     		cmp	r3, #0
 485 0024 05DD     		ble	.L33
 284:Core/Src/main.c ****   }
 486              		.loc 1 284 0 is_stmt 1
 487 0026 EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 488 0028 0D2A     		cmp	r2, #13
 489 002a F8D0     		beq	.L25
 284:Core/Src/main.c ****   }
 490              		.loc 1 284 0 is_stmt 0 discriminator 2
 491 002c 0A2A     		cmp	r2, #10
 492 002e F7D1     		bne	.L26
 493 0030 F5E7     		b	.L25
 494              	.L33:
 495              	.LBE10:
 287:Core/Src/main.c ****     num_in_func = 0;
 496              		.loc 1 287 0 is_stmt 1
 497 0032 0B49     		ldr	r1, .L35
 498 0034 2846     		mov	r0, r5
 499 0036 FFF7FEFF 		bl	strstr
 500              	.LVL40:
 501 003a 10B1     		cbz	r0, .L34
 288:Core/Src/main.c ****   } else {
 502              		.loc 1 288 0
 503 003c 0020     		movs	r0, #0
 504              	.L28:
 505              	.LVL41:
 296:Core/Src/main.c **** 
 506              		.loc 1 296 0
 507 003e 40B0     		add	sp, sp, #256
 508              	.LCFI14:
 509              		.cfi_remember_state
 510              		.cfi_def_cfa_offset 16
 511              		@ sp needed
 512 0040 70BD     		pop	{r4, r5, r6, pc}
 513              	.LVL42:
 514              	.L34:
 515              	.LCFI15:
 516              		.cfi_restore_state
 517              	.LBB11:
 290:Core/Src/main.c ****       only_num[i-str_len] = num_target_array[i];
 518              		.loc 1 290 0
 519 0042 2046     		mov	r0, r4
 520              	.LVL43:
 521 0044 2146     		mov	r1, r4
 522 0046 04E0     		b	.L29
 523              	.LVL44:
 524              	.L30:
 291:Core/Src/main.c ****     }
 525              		.loc 1 291 0 discriminator 3
 526 0048 0B1A     		subs	r3, r1, r0
 527 004a 6A5C     		ldrb	r2, [r5, r1]	@ zero_extendqisi2
 528 004c 0DF80320 		strb	r2, [sp, r3]
 290:Core/Src/main.c ****       only_num[i-str_len] = num_target_array[i];
 529              		.loc 1 290 0 discriminator 3
 530 0050 0131     		adds	r1, r1, #1
 531              	.LVL45:
ARM GAS  /tmp/ccXdlwYT.s 			page 23


 532              	.L29:
 290:Core/Src/main.c ****       only_num[i-str_len] = num_target_array[i];
 533              		.loc 1 290 0 is_stmt 0 discriminator 1
 534 0052 8E42     		cmp	r6, r1
 535 0054 F8DC     		bgt	.L30
 536              	.LBE11:
 293:Core/Src/main.c ****   }
 537              		.loc 1 293 0 is_stmt 1
 538 0056 6846     		mov	r0, sp
 539 0058 FFF7FEFF 		bl	atoi
 540              	.LVL46:
 541 005c 80B2     		uxth	r0, r0
 542              	.LVL47:
 543 005e EEE7     		b	.L28
 544              	.L36:
 545              		.align	2
 546              	.L35:
 547 0060 00000000 		.word	.LC0
 548              		.cfi_endproc
 549              	.LFE227:
 551              		.section	.text.send_result,"ax",%progbits
 552              		.align	1
 553              		.global	send_result
 554              		.syntax unified
 555              		.thumb
 556              		.thumb_func
 557              		.fpu fpv4-sp-d16
 559              	send_result:
 560              	.LFB237:
 683:Core/Src/main.c **** 
 684:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 685:Core/Src/main.c **** uint16_t send_result(uint16_t res) {
 561              		.loc 1 685 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 8
 564              		@ frame_needed = 0, uses_anonymous_args = 0
 565              	.LVL48:
 566 0000 10B5     		push	{r4, lr}
 567              	.LCFI16:
 568              		.cfi_def_cfa_offset 8
 569              		.cfi_offset 4, -8
 570              		.cfi_offset 14, -4
 571 0002 82B0     		sub	sp, sp, #8
 572              	.LCFI17:
 573              		.cfi_def_cfa_offset 16
 574 0004 0446     		mov	r4, r0
 686:Core/Src/main.c ****   uint8_t c[] = {res>>8, res & 0xFF};
 575              		.loc 1 686 0
 576 0006 030A     		lsrs	r3, r0, #8
 577 0008 8DF80430 		strb	r3, [sp, #4]
 578 000c 8DF80500 		strb	r0, [sp, #5]
 687:Core/Src/main.c ****   HAL_UART_Transmit(&huart3, c, 2, 0xFF);
 579              		.loc 1 687 0
 580 0010 FF23     		movs	r3, #255
 581 0012 0222     		movs	r2, #2
 582 0014 01A9     		add	r1, sp, #4
 583 0016 0348     		ldr	r0, .L39
ARM GAS  /tmp/ccXdlwYT.s 			page 24


 584              	.LVL49:
 585 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 586              	.LVL50:
 688:Core/Src/main.c ****   return res;
 689:Core/Src/main.c **** }
 587              		.loc 1 689 0
 588 001c 2046     		mov	r0, r4
 589 001e 02B0     		add	sp, sp, #8
 590              	.LCFI18:
 591              		.cfi_def_cfa_offset 8
 592              		@ sp needed
 593 0020 10BD     		pop	{r4, pc}
 594              	.L40:
 595 0022 00BF     		.align	2
 596              	.L39:
 597 0024 00000000 		.word	huart3
 598              		.cfi_endproc
 599              	.LFE237:
 601              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 602              		.align	1
 603              		.global	HAL_ADC_ConvCpltCallback
 604              		.syntax unified
 605              		.thumb
 606              		.thumb_func
 607              		.fpu fpv4-sp-d16
 609              	HAL_ADC_ConvCpltCallback:
 610              	.LFB238:
 690:Core/Src/main.c **** 
 691:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
 692:Core/Src/main.c **** {
 611              		.loc 1 692 0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 0
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615              	.LVL51:
 616 0000 08B5     		push	{r3, lr}
 617              	.LCFI19:
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 3, -8
 620              		.cfi_offset 14, -4
 693:Core/Src/main.c ****   /* Turn LED1 on: Transfer process is correct */
 694:Core/Src/main.c **** //  DAC_val = 0;
 695:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 621              		.loc 1 695 0
 622 0002 0022     		movs	r2, #0
 623 0004 4021     		movs	r1, #64
 624 0006 0248     		ldr	r0, .L43
 625              	.LVL52:
 626 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 627              	.LVL53:
 696:Core/Src/main.c **** //  ADC_array[ADC_number] = HAL_ADC_GetValue(&hadc);
 697:Core/Src/main.c **** //  ADC_number ++;
 698:Core/Src/main.c **** //  BSP_LED_Off(LED1);
 699:Core/Src/main.c **** }
 628              		.loc 1 699 0
 629 000c 08BD     		pop	{r3, pc}
 630              	.L44:
ARM GAS  /tmp/ccXdlwYT.s 			page 25


 631 000e 00BF     		.align	2
 632              	.L43:
 633 0010 00000240 		.word	1073872896
 634              		.cfi_endproc
 635              	.LFE238:
 637              		.section	.text.Error_Handler,"ax",%progbits
 638              		.align	1
 639              		.global	Error_Handler
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 643              		.fpu fpv4-sp-d16
 645              	Error_Handler:
 646              	.LFB239:
 700:Core/Src/main.c **** 
 701:Core/Src/main.c **** 
 702:Core/Src/main.c **** 
 703:Core/Src/main.c **** /* USER CODE END 4 */
 704:Core/Src/main.c **** 
 705:Core/Src/main.c **** /**
 706:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 707:Core/Src/main.c ****   * @retval None
 708:Core/Src/main.c ****   */
 709:Core/Src/main.c **** void Error_Handler(void)
 710:Core/Src/main.c **** {
 647              		.loc 1 710 0
 648              		.cfi_startproc
 649              		@ Volatile: function does not return.
 650              		@ args = 0, pretend = 0, frame = 0
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              		@ link register save eliminated.
 653              	.LBB12:
 654              	.LBB13:
 655              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccXdlwYT.s 			page 26


  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccXdlwYT.s 			page 27


  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
ARM GAS  /tmp/ccXdlwYT.s 			page 28


 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 656              		.loc 2 142 0
 657              		.syntax unified
 658              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 659 0000 72B6     		cpsid i
 660              	@ 0 "" 2
 661              		.thumb
 662              		.syntax unified
 663              	.L46:
 664 0002 FEE7     		b	.L46
 665              	.LBE13:
 666              	.LBE12:
 667              		.cfi_endproc
 668              	.LFE239:
 670              		.section	.text.MX_ADC1_Init,"ax",%progbits
 671              		.align	1
 672              		.syntax unified
 673              		.thumb
 674              		.thumb_func
 675              		.fpu fpv4-sp-d16
 677              	MX_ADC1_Init:
 678              	.LFB230:
 404:Core/Src/main.c **** 
 679              		.loc 1 404 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 16
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683 0000 00B5     		push	{lr}
 684              	.LCFI20:
 685              		.cfi_def_cfa_offset 4
 686              		.cfi_offset 14, -4
 687 0002 85B0     		sub	sp, sp, #20
 688              	.LCFI21:
 689              		.cfi_def_cfa_offset 24
 410:Core/Src/main.c **** 
 690              		.loc 1 410 0
 691 0004 0023     		movs	r3, #0
 692 0006 0093     		str	r3, [sp]
 693 0008 0193     		str	r3, [sp, #4]
 694 000a 0293     		str	r3, [sp, #8]
 695 000c 0393     		str	r3, [sp, #12]
 422:Core/Src/main.c ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 696              		.loc 1 422 0
 697 000e 1B4B     		ldr	r3, .L55
 698 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 699 0012 53BB     		cbnz	r3, .L48
 423:Core/Src/main.c ****   } else {
 700              		.loc 1 423 0
 701 0014 1A4B     		ldr	r3, .L55+4
 702 0016 0022     		movs	r2, #0
 703 0018 5A60     		str	r2, [r3, #4]
 704              	.L49:
 431:Core/Src/main.c **** //  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
ARM GAS  /tmp/ccXdlwYT.s 			page 29


 705              		.loc 1 431 0
 706 001a 1948     		ldr	r0, .L55+4
 707 001c 194B     		ldr	r3, .L55+8
 708 001e 0360     		str	r3, [r0]
 434:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 709              		.loc 1 434 0
 710 0020 4FF08073 		mov	r3, #16777216
 711 0024 8360     		str	r3, [r0, #8]
 435:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 712              		.loc 1 435 0
 713 0026 0023     		movs	r3, #0
 714 0028 0361     		str	r3, [r0, #16]
 436:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 715              		.loc 1 436 0
 716 002a 0376     		strb	r3, [r0, #24]
 437:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 717              		.loc 1 437 0
 718 002c 80F82030 		strb	r3, [r0, #32]
 438:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 719              		.loc 1 438 0
 720 0030 4FF08052 		mov	r2, #268435456
 721 0034 C262     		str	r2, [r0, #44]
 439:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 722              		.loc 1 439 0
 723 0036 4FF0C062 		mov	r2, #100663296
 724 003a 8262     		str	r2, [r0, #40]
 440:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 725              		.loc 1 440 0
 726 003c C360     		str	r3, [r0, #12]
 441:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 727              		.loc 1 441 0
 728 003e 0123     		movs	r3, #1
 729 0040 C361     		str	r3, [r0, #28]
 442:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 730              		.loc 1 442 0
 731 0042 80F83030 		strb	r3, [r0, #48]
 443:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 732              		.loc 1 443 0
 733 0046 4361     		str	r3, [r0, #20]
 444:Core/Src/main.c ****   {
 734              		.loc 1 444 0
 735 0048 FFF7FEFF 		bl	HAL_ADC_Init
 736              	.LVL54:
 737 004c 90B9     		cbnz	r0, .L53
 450:Core/Src/main.c ****   sConfig.Rank = 1;
 738              		.loc 1 450 0
 739 004e 0A23     		movs	r3, #10
 740 0050 0093     		str	r3, [sp]
 451:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 741              		.loc 1 451 0
 742 0052 0123     		movs	r3, #1
 743 0054 0193     		str	r3, [sp, #4]
 452:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 744              		.loc 1 452 0
 745 0056 0023     		movs	r3, #0
 746 0058 0293     		str	r3, [sp, #8]
 453:Core/Src/main.c ****   {
ARM GAS  /tmp/ccXdlwYT.s 			page 30


 747              		.loc 1 453 0
 748 005a 6946     		mov	r1, sp
 749 005c 0848     		ldr	r0, .L55+4
 750 005e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 751              	.LVL55:
 752 0062 48B9     		cbnz	r0, .L54
 461:Core/Src/main.c **** 
 753              		.loc 1 461 0
 754 0064 05B0     		add	sp, sp, #20
 755              	.LCFI22:
 756              		.cfi_remember_state
 757              		.cfi_def_cfa_offset 4
 758              		@ sp needed
 759 0066 5DF804FB 		ldr	pc, [sp], #4
 760              	.L48:
 761              	.LCFI23:
 762              		.cfi_restore_state
 425:Core/Src/main.c ****   }
 763              		.loc 1 425 0
 764 006a 054B     		ldr	r3, .L55+4
 765 006c 4FF48032 		mov	r2, #65536
 766 0070 5A60     		str	r2, [r3, #4]
 767 0072 D2E7     		b	.L49
 768              	.L53:
 446:Core/Src/main.c ****   }
 769              		.loc 1 446 0
 770 0074 FFF7FEFF 		bl	Error_Handler
 771              	.LVL56:
 772              	.L54:
 455:Core/Src/main.c ****   }
 773              		.loc 1 455 0
 774 0078 FFF7FEFF 		bl	Error_Handler
 775              	.LVL57:
 776              	.L56:
 777              		.align	2
 778              	.L55:
 779 007c 00000000 		.word	.LANCHOR3
 780 0080 00000000 		.word	hadc1
 781 0084 00200140 		.word	1073815552
 782              		.cfi_endproc
 783              	.LFE230:
 785              		.section	.text.MX_TIM2_Init,"ax",%progbits
 786              		.align	1
 787              		.syntax unified
 788              		.thumb
 789              		.thumb_func
 790              		.fpu fpv4-sp-d16
 792              	MX_TIM2_Init:
 793              	.LFB233:
 557:Core/Src/main.c **** 
 794              		.loc 1 557 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 24
 797              		@ frame_needed = 0, uses_anonymous_args = 0
 798 0000 10B5     		push	{r4, lr}
 799              	.LCFI24:
 800              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccXdlwYT.s 			page 31


 801              		.cfi_offset 4, -8
 802              		.cfi_offset 14, -4
 803 0002 86B0     		sub	sp, sp, #24
 804              	.LCFI25:
 805              		.cfi_def_cfa_offset 32
 563:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 806              		.loc 1 563 0
 807 0004 0024     		movs	r4, #0
 808 0006 0294     		str	r4, [sp, #8]
 809 0008 0394     		str	r4, [sp, #12]
 810 000a 0494     		str	r4, [sp, #16]
 811 000c 0594     		str	r4, [sp, #20]
 564:Core/Src/main.c **** 
 812              		.loc 1 564 0
 813 000e 0094     		str	r4, [sp]
 814 0010 0194     		str	r4, [sp, #4]
 567:Core/Src/main.c ****   // also put it instead auto "prescaler" string
 815              		.loc 1 567 0
 816 0012 FFF7FEFF 		bl	MX_ADC1_Init
 817              	.LVL58:
 569:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 818              		.loc 1 569 0
 819 0016 144B     		ldr	r3, .L65
 820 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 821 001a 1448     		ldr	r0, .L65+4
 822 001c 4360     		str	r3, [r0, #4]
 572:Core/Src/main.c **** //  htim2.Init.Prescaler = timestep;
 823              		.loc 1 572 0
 824 001e 4FF08043 		mov	r3, #1073741824
 825 0022 0360     		str	r3, [r0]
 574:Core/Src/main.c ****   htim2.Init.Period = 47;
 826              		.loc 1 574 0
 827 0024 8460     		str	r4, [r0, #8]
 575:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 828              		.loc 1 575 0
 829 0026 2F23     		movs	r3, #47
 830 0028 C360     		str	r3, [r0, #12]
 576:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 831              		.loc 1 576 0
 832 002a 0461     		str	r4, [r0, #16]
 577:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 833              		.loc 1 577 0
 834 002c 8461     		str	r4, [r0, #24]
 578:Core/Src/main.c ****   {
 835              		.loc 1 578 0
 836 002e FFF7FEFF 		bl	HAL_TIM_Base_Init
 837              	.LVL59:
 838 0032 98B9     		cbnz	r0, .L62
 582:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 839              		.loc 1 582 0
 840 0034 06A9     		add	r1, sp, #24
 841 0036 4FF48053 		mov	r3, #4096
 842 003a 41F8103D 		str	r3, [r1, #-16]!
 583:Core/Src/main.c ****   {
 843              		.loc 1 583 0
 844 003e 0B48     		ldr	r0, .L65+4
 845 0040 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
ARM GAS  /tmp/ccXdlwYT.s 			page 32


 846              	.LVL60:
 847 0044 60B9     		cbnz	r0, .L63
 587:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 848              		.loc 1 587 0
 849 0046 2023     		movs	r3, #32
 850 0048 0093     		str	r3, [sp]
 588:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 851              		.loc 1 588 0
 852 004a 0023     		movs	r3, #0
 853 004c 0193     		str	r3, [sp, #4]
 589:Core/Src/main.c ****   {
 854              		.loc 1 589 0
 855 004e 6946     		mov	r1, sp
 856 0050 0648     		ldr	r0, .L65+4
 857 0052 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 858              	.LVL61:
 859 0056 28B9     		cbnz	r0, .L64
 597:Core/Src/main.c **** 
 860              		.loc 1 597 0
 861 0058 06B0     		add	sp, sp, #24
 862              	.LCFI26:
 863              		.cfi_remember_state
 864              		.cfi_def_cfa_offset 8
 865              		@ sp needed
 866 005a 10BD     		pop	{r4, pc}
 867              	.L62:
 868              	.LCFI27:
 869              		.cfi_restore_state
 580:Core/Src/main.c ****   }
 870              		.loc 1 580 0
 871 005c FFF7FEFF 		bl	Error_Handler
 872              	.LVL62:
 873              	.L63:
 585:Core/Src/main.c ****   }
 874              		.loc 1 585 0
 875 0060 FFF7FEFF 		bl	Error_Handler
 876              	.LVL63:
 877              	.L64:
 591:Core/Src/main.c ****   }
 878              		.loc 1 591 0
 879 0064 FFF7FEFF 		bl	Error_Handler
 880              	.LVL64:
 881              	.L66:
 882              		.align	2
 883              	.L65:
 884 0068 00000000 		.word	.LANCHOR3
 885 006c 00000000 		.word	htim2
 886              		.cfi_endproc
 887              	.LFE233:
 889              		.section	.text.measure,"ax",%progbits
 890              		.align	1
 891              		.global	measure
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 895              		.fpu fpv4-sp-d16
 897              	measure:
ARM GAS  /tmp/ccXdlwYT.s 			page 33


 898              	.LFB223:
 159:Core/Src/main.c ****   uint16_t i;
 899              		.loc 1 159 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903 0000 08B5     		push	{r3, lr}
 904              	.LCFI28:
 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 3, -8
 907              		.cfi_offset 14, -4
 162:Core/Src/main.c **** 
 908              		.loc 1 162 0
 909 0002 FFF7FEFF 		bl	MX_TIM2_Init
 910              	.LVL65:
 164:Core/Src/main.c ****     DAC_array[i] = _cur_max;
 911              		.loc 1 164 0
 912 0006 0023     		movs	r3, #0
 913 0008 07E0     		b	.L68
 914              	.LVL66:
 915              	.L69:
 165:Core/Src/main.c ****   }
 916              		.loc 1 165 0 discriminator 3
 917 000a 214A     		ldr	r2, .L77
 918 000c 1288     		ldrh	r2, [r2]
 919 000e 92B2     		uxth	r2, r2
 920 0010 2049     		ldr	r1, .L77+4
 921 0012 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 164:Core/Src/main.c ****     DAC_array[i] = _cur_max;
 922              		.loc 1 164 0 discriminator 3
 923 0016 0133     		adds	r3, r3, #1
 924              	.LVL67:
 925 0018 9BB2     		uxth	r3, r3
 926              	.LVL68:
 927              	.L68:
 164:Core/Src/main.c ****     DAC_array[i] = _cur_max;
 928              		.loc 1 164 0 is_stmt 0 discriminator 1
 929 001a 1F4A     		ldr	r2, .L77+8
 930 001c 1288     		ldrh	r2, [r2]
 931 001e 92B2     		uxth	r2, r2
 932 0020 9A42     		cmp	r2, r3
 933 0022 F2D8     		bhi	.L69
 167:Core/Src/main.c ****     DAC_array[i] = _cur_min;
 934              		.loc 1 167 0 is_stmt 1
 935 0024 1C4B     		ldr	r3, .L77+8
 936              	.LVL69:
 937 0026 1B88     		ldrh	r3, [r3]
 938 0028 9BB2     		uxth	r3, r3
 939              	.LVL70:
 940 002a 07E0     		b	.L70
 941              	.L71:
 168:Core/Src/main.c ****   }
 942              		.loc 1 168 0 discriminator 3
 943 002c 1B4A     		ldr	r2, .L77+12
 944 002e 1288     		ldrh	r2, [r2]
 945 0030 92B2     		uxth	r2, r2
 946 0032 1849     		ldr	r1, .L77+4
ARM GAS  /tmp/ccXdlwYT.s 			page 34


 947 0034 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 167:Core/Src/main.c ****     DAC_array[i] = _cur_min;
 948              		.loc 1 167 0 discriminator 3
 949 0038 0133     		adds	r3, r3, #1
 950              	.LVL71:
 951 003a 9BB2     		uxth	r3, r3
 952              	.LVL72:
 953              	.L70:
 167:Core/Src/main.c ****     DAC_array[i] = _cur_min;
 954              		.loc 1 167 0 is_stmt 0 discriminator 1
 955 003c B3F5806F 		cmp	r3, #1024
 956 0040 F4D3     		bcc	.L71
 171:Core/Src/main.c ****     ADC_array[i] = 0;
 957              		.loc 1 171 0 is_stmt 1
 958 0042 0023     		movs	r3, #0
 959              	.LVL73:
 960 0044 08E0     		b	.L72
 961              	.LVL74:
 962              	.L73:
 172:Core/Src/main.c ****     Transmit_array[i] = 0xff;
 963              		.loc 1 172 0 discriminator 3
 964 0046 164A     		ldr	r2, .L77+16
 965 0048 0021     		movs	r1, #0
 966 004a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 173:Core/Src/main.c ****   }
 967              		.loc 1 173 0 discriminator 3
 968 004e 154A     		ldr	r2, .L77+20
 969 0050 FF21     		movs	r1, #255
 970 0052 D154     		strb	r1, [r2, r3]
 171:Core/Src/main.c ****     ADC_array[i] = 0;
 971              		.loc 1 171 0 discriminator 3
 972 0054 0133     		adds	r3, r3, #1
 973              	.LVL75:
 974 0056 9BB2     		uxth	r3, r3
 975              	.LVL76:
 976              	.L72:
 171:Core/Src/main.c ****     ADC_array[i] = 0;
 977              		.loc 1 171 0 is_stmt 0 discriminator 1
 978 0058 B3F5806F 		cmp	r3, #1024
 979 005c F3D3     		bcc	.L73
 176:Core/Src/main.c **** 
 980              		.loc 1 176 0 is_stmt 1
 981 005e 0122     		movs	r2, #1
 982 0060 4021     		movs	r1, #64
 983 0062 1148     		ldr	r0, .L77+24
 984 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 985              	.LVL77:
 178:Core/Src/main.c **** 
 986              		.loc 1 178 0
 987 0068 4FF48060 		mov	r0, #1024
 988 006c FFF7FEFF 		bl	read_ADC_values
 989              	.LVL78:
 183:Core/Src/main.c ****     Transmit_array[i] = ADC_array[i] >> 1;
 990              		.loc 1 183 0
 991 0070 0023     		movs	r3, #0
 992 0072 08E0     		b	.L74
 993              	.LVL79:
ARM GAS  /tmp/ccXdlwYT.s 			page 35


 994              	.L75:
 184:Core/Src/main.c **** //    Transmit_array[i*2+1] = ADC_array[i] & 0xFF;
 995              		.loc 1 184 0 discriminator 3
 996 0074 0A4A     		ldr	r2, .L77+16
 997 0076 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 998 007a C2F34702 		ubfx	r2, r2, #1, #8
 999 007e 0949     		ldr	r1, .L77+20
 1000 0080 CA54     		strb	r2, [r1, r3]
 183:Core/Src/main.c ****     Transmit_array[i] = ADC_array[i] >> 1;
 1001              		.loc 1 183 0 discriminator 3
 1002 0082 0133     		adds	r3, r3, #1
 1003              	.LVL80:
 1004 0084 9BB2     		uxth	r3, r3
 1005              	.LVL81:
 1006              	.L74:
 183:Core/Src/main.c ****     Transmit_array[i] = ADC_array[i] >> 1;
 1007              		.loc 1 183 0 is_stmt 0 discriminator 1
 1008 0086 B3F5806F 		cmp	r3, #1024
 1009 008a F3D3     		bcc	.L75
 189:Core/Src/main.c **** 
 1010              		.loc 1 189 0 is_stmt 1
 1011 008c 0020     		movs	r0, #0
 1012 008e 08BD     		pop	{r3, pc}
 1013              	.LVL82:
 1014              	.L78:
 1015              		.align	2
 1016              	.L77:
 1017 0090 00000000 		.word	.LANCHOR4
 1018 0094 00000000 		.word	.LANCHOR2
 1019 0098 00000000 		.word	.LANCHOR5
 1020 009c 00000000 		.word	.LANCHOR6
 1021 00a0 00000000 		.word	.LANCHOR1
 1022 00a4 00000000 		.word	.LANCHOR0
 1023 00a8 00000240 		.word	1073872896
 1024              		.cfi_endproc
 1025              	.LFE223:
 1027              		.global	__aeabi_i2d
 1028              		.global	__aeabi_dmul
 1029              		.global	__aeabi_d2uiz
 1030              		.section	.text.z_func,"ax",%progbits
 1031              		.align	1
 1032              		.global	z_func
 1033              		.syntax unified
 1034              		.thumb
 1035              		.thumb_func
 1036              		.fpu fpv4-sp-d16
 1038              	z_func:
 1039              	.LFB226:
 208:Core/Src/main.c ****   uint8_t num_flag = 0;
 1040              		.loc 1 208 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 56
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044              	.LVL83:
 1045 0000 70B5     		push	{r4, r5, r6, lr}
 1046              	.LCFI29:
 1047              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccXdlwYT.s 			page 36


 1048              		.cfi_offset 4, -16
 1049              		.cfi_offset 5, -12
 1050              		.cfi_offset 6, -8
 1051              		.cfi_offset 14, -4
 1052 0002 8EB0     		sub	sp, sp, #56
 1053              	.LCFI30:
 1054              		.cfi_def_cfa_offset 72
 1055 0004 0446     		mov	r4, r0
 1056              	.LVL84:
 211:Core/Src/main.c ****   char z2[] = "imp";
 1057              		.loc 1 211 0
 1058 0006 5E4B     		ldr	r3, .L92+8
 1059 0008 93E80300 		ldm	r3, {r0, r1}
 1060              	.LVL85:
 1061 000c 0C90     		str	r0, [sp, #48]
 1062 000e 8DF83410 		strb	r1, [sp, #52]
 212:Core/Src/main.c ****   char z3[] = "start";
 1063              		.loc 1 212 0
 1064 0012 5C4B     		ldr	r3, .L92+12
 1065 0014 0B93     		str	r3, [sp, #44]
 213:Core/Src/main.c ****   char z4[] = "loadb";
 1066              		.loc 1 213 0
 1067 0016 5C4B     		ldr	r3, .L92+16
 1068 0018 93E80300 		ldm	r3, {r0, r1}
 1069 001c 0990     		str	r0, [sp, #36]
 1070 001e ADF82810 		strh	r1, [sp, #40]	@ movhi
 214:Core/Src/main.c ****   char z7[] = "cur";
 1071              		.loc 1 214 0
 1072 0022 5A4B     		ldr	r3, .L92+20
 1073 0024 93E80300 		ldm	r3, {r0, r1}
 1074 0028 0790     		str	r0, [sp, #28]
 1075 002a ADF82010 		strh	r1, [sp, #32]	@ movhi
 215:Core/Src/main.c ****   char back[] = "back";
 1076              		.loc 1 215 0
 1077 002e 584B     		ldr	r3, .L92+24
 1078 0030 0693     		str	r3, [sp, #24]
 216:Core/Src/main.c ****   char avgn[] = "avgn";
 1079              		.loc 1 216 0
 1080 0032 584B     		ldr	r3, .L92+28
 1081 0034 93E80300 		ldm	r3, {r0, r1}
 1082 0038 0490     		str	r0, [sp, #16]
 1083 003a 8DF81410 		strb	r1, [sp, #20]
 217:Core/Src/main.c ****   char def[] = "def";
 1084              		.loc 1 217 0
 1085 003e 564B     		ldr	r3, .L92+32
 1086 0040 93E80300 		ldm	r3, {r0, r1}
 1087 0044 0290     		str	r0, [sp, #8]
 1088 0046 8DF80C10 		strb	r1, [sp, #12]
 218:Core/Src/main.c **** 
 1089              		.loc 1 218 0
 1090 004a 544B     		ldr	r3, .L92+36
 1091 004c 0193     		str	r3, [sp, #4]
 220:Core/Src/main.c ****     func_num = get_num(target_array, 4);
 1092              		.loc 1 220 0
 1093 004e 0CA9     		add	r1, sp, #48
 1094 0050 2046     		mov	r0, r4
 1095 0052 FFF7FEFF 		bl	strstr
ARM GAS  /tmp/ccXdlwYT.s 			page 37


 1096              	.LVL86:
 1097 0056 0028     		cmp	r0, #0
 1098 0058 00F08580 		beq	.L90
 221:Core/Src/main.c ****     if (func_num > 0) func_num = (func_num*2-1);
 1099              		.loc 1 221 0
 1100 005c 0421     		movs	r1, #4
 1101 005e 2046     		mov	r0, r4
 1102 0060 FFF7FEFF 		bl	get_num
 1103              	.LVL87:
 222:Core/Src/main.c ****     _timestep = func_num;
 1104              		.loc 1 222 0
 1105 0064 0546     		mov	r5, r0
 1106 0066 18B1     		cbz	r0, .L81
 222:Core/Src/main.c ****     _timestep = func_num;
 1107              		.loc 1 222 0 is_stmt 0 discriminator 1
 1108 0068 4500     		lsls	r5, r0, #1
 1109 006a ADB2     		uxth	r5, r5
 1110 006c 013D     		subs	r5, r5, #1
 1111 006e ADB2     		uxth	r5, r5
 1112              	.LVL88:
 1113              	.L81:
 223:Core/Src/main.c **** //    printf("step %d\n", func_num);
 1114              		.loc 1 223 0 is_stmt 1
 1115 0070 EBB2     		uxtb	r3, r5
 1116 0072 4B4A     		ldr	r2, .L92+40
 1117 0074 1370     		strb	r3, [r2]
 1118              	.LVL89:
 226:Core/Src/main.c ****   }
 1119              		.loc 1 226 0
 1120 0076 FF23     		movs	r3, #255
 1121 0078 0322     		movs	r2, #3
 1122 007a 4A49     		ldr	r1, .L92+44
 1123 007c 4A48     		ldr	r0, .L92+48
 1124 007e FFF7FEFF 		bl	HAL_UART_Transmit
 1125              	.LVL90:
 225:Core/Src/main.c ****     HAL_UART_Transmit(&huart3, (uint8_t*)"s>\n", 3, 0xFF);
 1126              		.loc 1 225 0
 1127 0082 0126     		movs	r6, #1
 1128              	.LVL91:
 1129              	.L80:
 228:Core/Src/main.c ****     func_num = get_num(target_array, 3);
 1130              		.loc 1 228 0
 1131 0084 0BA9     		add	r1, sp, #44
 1132 0086 2046     		mov	r0, r4
 1133 0088 FFF7FEFF 		bl	strstr
 1134              	.LVL92:
 1135 008c 58B1     		cbz	r0, .L82
 229:Core/Src/main.c ****     _time_on = func_num*10;
 1136              		.loc 1 229 0
 1137 008e 0321     		movs	r1, #3
 1138 0090 2046     		mov	r0, r4
 1139 0092 FFF7FEFF 		bl	get_num
 1140              	.LVL93:
 1141 0096 0546     		mov	r5, r0
 1142              	.LVL94:
 230:Core/Src/main.c **** //    printf("imp %d\n", func_num);
 1143              		.loc 1 230 0
ARM GAS  /tmp/ccXdlwYT.s 			page 38


 1144 0098 00EB8002 		add	r2, r0, r0, lsl #2
 1145 009c 5300     		lsls	r3, r2, #1
 1146 009e 9BB2     		uxth	r3, r3
 1147 00a0 424A     		ldr	r2, .L92+52
 1148 00a2 1380     		strh	r3, [r2]	@ movhi
 1149              	.LVL95:
 232:Core/Src/main.c ****   }
 1150              		.loc 1 232 0
 1151 00a4 0126     		movs	r6, #1
 1152              	.LVL96:
 1153              	.L82:
 234:Core/Src/main.c ****     measure();
 1154              		.loc 1 234 0
 1155 00a6 09A9     		add	r1, sp, #36
 1156 00a8 2046     		mov	r0, r4
 1157 00aa FFF7FEFF 		bl	strstr
 1158              	.LVL97:
 1159 00ae 10B1     		cbz	r0, .L83
 235:Core/Src/main.c **** //    printf("start\n");
 1160              		.loc 1 235 0
 1161 00b0 FFF7FEFF 		bl	measure
 1162              	.LVL98:
 237:Core/Src/main.c ****   }
 1163              		.loc 1 237 0
 1164 00b4 0026     		movs	r6, #0
 1165              	.LVL99:
 1166              	.L83:
 239:Core/Src/main.c ****     send_back();
 1167              		.loc 1 239 0
 1168 00b6 07A9     		add	r1, sp, #28
 1169 00b8 2046     		mov	r0, r4
 1170 00ba FFF7FEFF 		bl	strstr
 1171              	.LVL100:
 1172 00be 10B1     		cbz	r0, .L84
 240:Core/Src/main.c **** //    printf("loadb\n");
 1173              		.loc 1 240 0
 1174 00c0 FFF7FEFF 		bl	send_back
 1175              	.LVL101:
 242:Core/Src/main.c ****   }
 1176              		.loc 1 242 0
 1177 00c4 0026     		movs	r6, #0
 1178              	.LVL102:
 1179              	.L84:
 244:Core/Src/main.c ****     func_num = get_num(target_array, 3);
 1180              		.loc 1 244 0
 1181 00c6 06A9     		add	r1, sp, #24
 1182 00c8 2046     		mov	r0, r4
 1183 00ca FFF7FEFF 		bl	strstr
 1184              	.LVL103:
 1185 00ce 88B1     		cbz	r0, .L85
 245:Core/Src/main.c ****     _cur_max = func_num*(2*40.96/3.3);
 1186              		.loc 1 245 0
 1187 00d0 0321     		movs	r1, #3
 1188 00d2 2046     		mov	r0, r4
 1189 00d4 FFF7FEFF 		bl	get_num
 1190              	.LVL104:
 1191 00d8 0546     		mov	r5, r0
ARM GAS  /tmp/ccXdlwYT.s 			page 39


 1192              	.LVL105:
 246:Core/Src/main.c **** //    printf("cur %d\n", func_num);
 1193              		.loc 1 246 0
 1194 00da FFF7FEFF 		bl	__aeabi_i2d
 1195              	.LVL106:
 1196 00de 26A3     		adr	r3, .L92
 1197 00e0 D3E90023 		ldrd	r2, [r3]
 1198 00e4 FFF7FEFF 		bl	__aeabi_dmul
 1199              	.LVL107:
 1200 00e8 FFF7FEFF 		bl	__aeabi_d2uiz
 1201              	.LVL108:
 1202 00ec 80B2     		uxth	r0, r0
 1203 00ee 304B     		ldr	r3, .L92+56
 1204 00f0 1880     		strh	r0, [r3]	@ movhi
 1205              	.LVL109:
 248:Core/Src/main.c ****   }
 1206              		.loc 1 248 0
 1207 00f2 0126     		movs	r6, #1
 1208              	.LVL110:
 1209              	.L85:
 250:Core/Src/main.c ****     func_num = get_num(target_array, 4);
 1210              		.loc 1 250 0
 1211 00f4 04A9     		add	r1, sp, #16
 1212 00f6 2046     		mov	r0, r4
 1213 00f8 FFF7FEFF 		bl	strstr
 1214              	.LVL111:
 1215 00fc 88B1     		cbz	r0, .L86
 251:Core/Src/main.c ****     _cur_min = func_num*(2*40.96/3.3);
 1216              		.loc 1 251 0
 1217 00fe 0421     		movs	r1, #4
 1218 0100 2046     		mov	r0, r4
 1219 0102 FFF7FEFF 		bl	get_num
 1220              	.LVL112:
 1221 0106 0546     		mov	r5, r0
 1222              	.LVL113:
 252:Core/Src/main.c **** //    printf("cur %d\n", func_num);
 1223              		.loc 1 252 0
 1224 0108 FFF7FEFF 		bl	__aeabi_i2d
 1225              	.LVL114:
 1226 010c 1AA3     		adr	r3, .L92
 1227 010e D3E90023 		ldrd	r2, [r3]
 1228 0112 FFF7FEFF 		bl	__aeabi_dmul
 1229              	.LVL115:
 1230 0116 FFF7FEFF 		bl	__aeabi_d2uiz
 1231              	.LVL116:
 1232 011a 80B2     		uxth	r0, r0
 1233 011c 254B     		ldr	r3, .L92+60
 1234 011e 1880     		strh	r0, [r3]	@ movhi
 1235              	.LVL117:
 254:Core/Src/main.c ****   }
 1236              		.loc 1 254 0
 1237 0120 0126     		movs	r6, #1
 1238              	.LVL118:
 1239              	.L86:
 256:Core/Src/main.c ****     func_num = get_num(target_array, 4);
 1240              		.loc 1 256 0
 1241 0122 02A9     		add	r1, sp, #8
ARM GAS  /tmp/ccXdlwYT.s 			page 40


 1242 0124 2046     		mov	r0, r4
 1243 0126 FFF7FEFF 		bl	strstr
 1244              	.LVL119:
 1245 012a 40B1     		cbz	r0, .L87
 257:Core/Src/main.c ****     _avgn = func_num;
 1246              		.loc 1 257 0
 1247 012c 0421     		movs	r1, #4
 1248 012e 2046     		mov	r0, r4
 1249 0130 FFF7FEFF 		bl	get_num
 1250              	.LVL120:
 1251 0134 0546     		mov	r5, r0
 1252              	.LVL121:
 258:Core/Src/main.c **** //    printf("cur %d\n", func_num);
 1253              		.loc 1 258 0
 1254 0136 C2B2     		uxtb	r2, r0
 1255 0138 1F4B     		ldr	r3, .L92+64
 1256 013a 1A70     		strb	r2, [r3]
 1257              	.LVL122:
 260:Core/Src/main.c ****   }
 1258              		.loc 1 260 0
 1259 013c 0126     		movs	r6, #1
 1260              	.LVL123:
 1261              	.L87:
 262:Core/Src/main.c ****     _timestep = 1;
 1262              		.loc 1 262 0
 1263 013e 01A9     		add	r1, sp, #4
 1264 0140 2046     		mov	r0, r4
 1265 0142 FFF7FEFF 		bl	strstr
 1266              	.LVL124:
 1267 0146 88B1     		cbz	r0, .L88
 263:Core/Src/main.c ****     _cur_max = 12.5*(2*40.96/3.3);
 1268              		.loc 1 263 0
 1269 0148 154B     		ldr	r3, .L92+40
 1270 014a 0122     		movs	r2, #1
 1271 014c 1A70     		strb	r2, [r3]
 264:Core/Src/main.c ****     _time_on = 500;
 1272              		.loc 1 264 0
 1273 014e 184B     		ldr	r3, .L92+56
 1274 0150 4FF49B72 		mov	r2, #310
 1275 0154 1A80     		strh	r2, [r3]	@ movhi
 265:Core/Src/main.c **** //    printf("def\n");
 1276              		.loc 1 265 0
 1277 0156 154B     		ldr	r3, .L92+52
 1278 0158 4FF4FA72 		mov	r2, #500
 1279 015c 1A80     		strh	r2, [r3]	@ movhi
 1280              	.LVL125:
 271:Core/Src/main.c ****   } else {
 1281              		.loc 1 271 0
 1282 015e 0025     		movs	r5, #0
 1283              	.LVL126:
 1284              	.L89:
 275:Core/Src/main.c **** 
 1285              		.loc 1 275 0
 1286 0160 2846     		mov	r0, r5
 1287 0162 0EB0     		add	sp, sp, #56
 1288              	.LCFI31:
 1289              		.cfi_remember_state
ARM GAS  /tmp/ccXdlwYT.s 			page 41


 1290              		.cfi_def_cfa_offset 16
 1291              		@ sp needed
 1292 0164 70BD     		pop	{r4, r5, r6, pc}
 1293              	.LVL127:
 1294              	.L90:
 1295              	.LCFI32:
 1296              		.cfi_restore_state
 210:Core/Src/main.c ****   char z1[] = "step";
 1297              		.loc 1 210 0
 1298 0166 0025     		movs	r5, #0
 209:Core/Src/main.c ****   uint16_t func_num = 0;
 1299              		.loc 1 209 0
 1300 0168 2E46     		mov	r6, r5
 1301 016a 8BE7     		b	.L80
 1302              	.LVL128:
 1303              	.L88:
 270:Core/Src/main.c ****     return 0;
 1304              		.loc 1 270 0
 1305 016c 002E     		cmp	r6, #0
 1306 016e F7D1     		bne	.L89
 271:Core/Src/main.c ****   } else {
 1307              		.loc 1 271 0
 1308 0170 0025     		movs	r5, #0
 1309              	.LVL129:
 1310 0172 F5E7     		b	.L89
 1311              	.L93:
 1312 0174 AFF30080 		.align	3
 1313              	.L92:
 1314 0178 D418308D 		.word	2368739540
 1315 017c 01D33840 		.word	1077465857
 1316 0180 04000000 		.word	.LC1
 1317 0184 696D7000 		.word	7368041
 1318 0188 0C000000 		.word	.LC2
 1319 018c 14000000 		.word	.LC3
 1320 0190 63757200 		.word	7501155
 1321 0194 1C000000 		.word	.LC4
 1322 0198 24000000 		.word	.LC5
 1323 019c 64656600 		.word	6710628
 1324 01a0 00000000 		.word	.LANCHOR3
 1325 01a4 00000000 		.word	.LC6
 1326 01a8 00000000 		.word	huart3
 1327 01ac 00000000 		.word	.LANCHOR5
 1328 01b0 00000000 		.word	.LANCHOR4
 1329 01b4 00000000 		.word	.LANCHOR6
 1330 01b8 00000000 		.word	.LANCHOR7
 1331              		.cfi_endproc
 1332              	.LFE226:
 1334              		.section	.text.try_to_read,"ax",%progbits
 1335              		.align	1
 1336              		.global	try_to_read
 1337              		.syntax unified
 1338              		.thumb
 1339              		.thumb_func
 1340              		.fpu fpv4-sp-d16
 1342              	try_to_read:
 1343              	.LFB222:
 124:Core/Src/main.c ****   Receive_array[0] = 0;
ARM GAS  /tmp/ccXdlwYT.s 			page 42


 1344              		.loc 1 124 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 0
 1347              		@ frame_needed = 0, uses_anonymous_args = 0
 1348 0000 10B5     		push	{r4, lr}
 1349              	.LCFI33:
 1350              		.cfi_def_cfa_offset 8
 1351              		.cfi_offset 4, -8
 1352              		.cfi_offset 14, -4
 125:Core/Src/main.c ****   HAL_UART_Receive(&huart3, (uint8_t*) Receive_array, 255, 50);
 1353              		.loc 1 125 0
 1354 0002 0F4C     		ldr	r4, .L100
 1355 0004 0023     		movs	r3, #0
 1356 0006 2370     		strb	r3, [r4]
 126:Core/Src/main.c ****   HAL_Delay(1);
 1357              		.loc 1 126 0
 1358 0008 3223     		movs	r3, #50
 1359 000a FF22     		movs	r2, #255
 1360 000c 2146     		mov	r1, r4
 1361 000e 0D48     		ldr	r0, .L100+4
 1362 0010 FFF7FEFF 		bl	HAL_UART_Receive
 1363              	.LVL130:
 127:Core/Src/main.c **** 
 1364              		.loc 1 127 0
 1365 0014 0120     		movs	r0, #1
 1366 0016 FFF7FEFF 		bl	HAL_Delay
 1367              	.LVL131:
 149:Core/Src/main.c ****     z_func((char*) Receive_array);
 1368              		.loc 1 149 0
 1369 001a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1370 001c DBB2     		uxtb	r3, r3
 1371 001e 032B     		cmp	r3, #3
 1372 0020 02D8     		bhi	.L99
 1373              	.L95:
 156:Core/Src/main.c **** }
 1374              		.loc 1 156 0
 1375 0022 074B     		ldr	r3, .L100
 1376 0024 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 157:Core/Src/main.c **** 
 1377              		.loc 1 157 0
 1378 0026 10BD     		pop	{r4, pc}
 1379              	.L99:
 150:Core/Src/main.c ****     for (int i = 0; i<255; i++) {
 1380              		.loc 1 150 0
 1381 0028 2046     		mov	r0, r4
 1382 002a FFF7FEFF 		bl	z_func
 1383              	.LVL132:
 1384              	.LBB14:
 151:Core/Src/main.c ****       Receive_array[i] = 0;
 1385              		.loc 1 151 0
 1386 002e 0023     		movs	r3, #0
 1387 0030 03E0     		b	.L96
 1388              	.LVL133:
 1389              	.L97:
 152:Core/Src/main.c ****     }
 1390              		.loc 1 152 0 discriminator 3
 1391 0032 034A     		ldr	r2, .L100
ARM GAS  /tmp/ccXdlwYT.s 			page 43


 1392 0034 0021     		movs	r1, #0
 1393 0036 D154     		strb	r1, [r2, r3]
 151:Core/Src/main.c ****       Receive_array[i] = 0;
 1394              		.loc 1 151 0 discriminator 3
 1395 0038 0133     		adds	r3, r3, #1
 1396              	.LVL134:
 1397              	.L96:
 151:Core/Src/main.c ****       Receive_array[i] = 0;
 1398              		.loc 1 151 0 is_stmt 0 discriminator 1
 1399 003a FE2B     		cmp	r3, #254
 1400 003c F9DD     		ble	.L97
 1401 003e F0E7     		b	.L95
 1402              	.L101:
 1403              		.align	2
 1404              	.L100:
 1405 0040 00000000 		.word	.LANCHOR8
 1406 0044 00000000 		.word	huart3
 1407              	.LBE14:
 1408              		.cfi_endproc
 1409              	.LFE222:
 1411              		.section	.text.loop,"ax",%progbits
 1412              		.align	1
 1413              		.global	loop
 1414              		.syntax unified
 1415              		.thumb
 1416              		.thumb_func
 1417              		.fpu fpv4-sp-d16
 1419              	loop:
 1420              	.LFB220:
 106:Core/Src/main.c **** //  blink(1);
 1421              		.loc 1 106 0 is_stmt 1
 1422              		.cfi_startproc
 1423              		@ args = 0, pretend = 0, frame = 0
 1424              		@ frame_needed = 0, uses_anonymous_args = 0
 1425 0000 08B5     		push	{r3, lr}
 1426              	.LCFI34:
 1427              		.cfi_def_cfa_offset 8
 1428              		.cfi_offset 3, -8
 1429              		.cfi_offset 14, -4
 108:Core/Src/main.c **** 
 1430              		.loc 1 108 0
 1431 0002 FFF7FEFF 		bl	try_to_read
 1432              	.LVL135:
 111:Core/Src/main.c **** 
 1433              		.loc 1 111 0
 1434 0006 08BD     		pop	{r3, pc}
 1435              		.cfi_endproc
 1436              	.LFE220:
 1438              		.section	.text.MX_DAC_Init,"ax",%progbits
 1439              		.align	1
 1440              		.syntax unified
 1441              		.thumb
 1442              		.thumb_func
 1443              		.fpu fpv4-sp-d16
 1445              	MX_DAC_Init:
 1446              	.LFB231:
 469:Core/Src/main.c **** 
ARM GAS  /tmp/ccXdlwYT.s 			page 44


 1447              		.loc 1 469 0
 1448              		.cfi_startproc
 1449              		@ args = 0, pretend = 0, frame = 8
 1450              		@ frame_needed = 0, uses_anonymous_args = 0
 1451 0000 00B5     		push	{lr}
 1452              	.LCFI35:
 1453              		.cfi_def_cfa_offset 4
 1454              		.cfi_offset 14, -4
 1455 0002 83B0     		sub	sp, sp, #12
 1456              	.LCFI36:
 1457              		.cfi_def_cfa_offset 16
 475:Core/Src/main.c **** 
 1458              		.loc 1 475 0
 1459 0004 0023     		movs	r3, #0
 1460 0006 0093     		str	r3, [sp]
 1461 0008 0193     		str	r3, [sp, #4]
 482:Core/Src/main.c ****   if (HAL_DAC_Init(&hdac) != HAL_OK)
 1462              		.loc 1 482 0
 1463 000a 0B48     		ldr	r0, .L110
 1464 000c 0B4B     		ldr	r3, .L110+4
 1465 000e 0360     		str	r3, [r0]
 483:Core/Src/main.c ****   {
 1466              		.loc 1 483 0
 1467 0010 FFF7FEFF 		bl	HAL_DAC_Init
 1468              	.LVL136:
 1469 0014 58B9     		cbnz	r0, .L108
 489:Core/Src/main.c ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 1470              		.loc 1 489 0
 1471 0016 2423     		movs	r3, #36
 1472 0018 0093     		str	r3, [sp]
 490:Core/Src/main.c **** //  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 1473              		.loc 1 490 0
 1474 001a 0022     		movs	r2, #0
 1475 001c 0192     		str	r2, [sp, #4]
 492:Core/Src/main.c ****   {
 1476              		.loc 1 492 0
 1477 001e 6946     		mov	r1, sp
 1478 0020 0548     		ldr	r0, .L110
 1479 0022 FFF7FEFF 		bl	HAL_DAC_ConfigChannel
 1480              	.LVL137:
 1481 0026 20B9     		cbnz	r0, .L109
 499:Core/Src/main.c **** 
 1482              		.loc 1 499 0
 1483 0028 03B0     		add	sp, sp, #12
 1484              	.LCFI37:
 1485              		.cfi_remember_state
 1486              		.cfi_def_cfa_offset 4
 1487              		@ sp needed
 1488 002a 5DF804FB 		ldr	pc, [sp], #4
 1489              	.L108:
 1490              	.LCFI38:
 1491              		.cfi_restore_state
 485:Core/Src/main.c ****   }
 1492              		.loc 1 485 0
 1493 002e FFF7FEFF 		bl	Error_Handler
 1494              	.LVL138:
 1495              	.L109:
ARM GAS  /tmp/ccXdlwYT.s 			page 45


 494:Core/Src/main.c ****   }
 1496              		.loc 1 494 0
 1497 0032 FFF7FEFF 		bl	Error_Handler
 1498              	.LVL139:
 1499              	.L111:
 1500 0036 00BF     		.align	2
 1501              	.L110:
 1502 0038 00000000 		.word	hdac
 1503 003c 00740040 		.word	1073771520
 1504              		.cfi_endproc
 1505              	.LFE231:
 1507              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1508              		.align	1
 1509              		.syntax unified
 1510              		.thumb
 1511              		.thumb_func
 1512              		.fpu fpv4-sp-d16
 1514              	MX_USART3_UART_Init:
 1515              	.LFB234:
 605:Core/Src/main.c **** 
 1516              		.loc 1 605 0
 1517              		.cfi_startproc
 1518              		@ args = 0, pretend = 0, frame = 0
 1519              		@ frame_needed = 0, uses_anonymous_args = 0
 1520 0000 08B5     		push	{r3, lr}
 1521              	.LCFI39:
 1522              		.cfi_def_cfa_offset 8
 1523              		.cfi_offset 3, -8
 1524              		.cfi_offset 14, -4
 619:Core/Src/main.c **** //  huart3.Init.BaudRate = 115200;
 1525              		.loc 1 619 0
 1526 0002 0A48     		ldr	r0, .L116
 1527 0004 0A4B     		ldr	r3, .L116+4
 1528 0006 0360     		str	r3, [r0]
 621:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1529              		.loc 1 621 0
 1530 0008 4FF46143 		mov	r3, #57600
 1531 000c 4360     		str	r3, [r0, #4]
 622:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1532              		.loc 1 622 0
 1533 000e 0023     		movs	r3, #0
 1534 0010 8360     		str	r3, [r0, #8]
 623:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 1535              		.loc 1 623 0
 1536 0012 C360     		str	r3, [r0, #12]
 624:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1537              		.loc 1 624 0
 1538 0014 0361     		str	r3, [r0, #16]
 625:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1539              		.loc 1 625 0
 1540 0016 0C22     		movs	r2, #12
 1541 0018 4261     		str	r2, [r0, #20]
 626:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1542              		.loc 1 626 0
 1543 001a 8361     		str	r3, [r0, #24]
 627:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1544              		.loc 1 627 0
ARM GAS  /tmp/ccXdlwYT.s 			page 46


 1545 001c C361     		str	r3, [r0, #28]
 628:Core/Src/main.c ****   {
 1546              		.loc 1 628 0
 1547 001e FFF7FEFF 		bl	HAL_UART_Init
 1548              	.LVL140:
 1549 0022 00B9     		cbnz	r0, .L115
 636:Core/Src/main.c **** 
 1550              		.loc 1 636 0
 1551 0024 08BD     		pop	{r3, pc}
 1552              	.L115:
 630:Core/Src/main.c ****   }
 1553              		.loc 1 630 0
 1554 0026 FFF7FEFF 		bl	Error_Handler
 1555              	.LVL141:
 1556              	.L117:
 1557 002a 00BF     		.align	2
 1558              	.L116:
 1559 002c 00000000 		.word	huart3
 1560 0030 00480040 		.word	1073760256
 1561              		.cfi_endproc
 1562              	.LFE234:
 1564              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1565              		.align	1
 1566              		.syntax unified
 1567              		.thumb
 1568              		.thumb_func
 1569              		.fpu fpv4-sp-d16
 1571              	MX_TIM1_Init:
 1572              	.LFB232:
 507:Core/Src/main.c **** 
 1573              		.loc 1 507 0
 1574              		.cfi_startproc
 1575              		@ args = 0, pretend = 0, frame = 24
 1576              		@ frame_needed = 0, uses_anonymous_args = 0
 1577 0000 00B5     		push	{lr}
 1578              	.LCFI40:
 1579              		.cfi_def_cfa_offset 4
 1580              		.cfi_offset 14, -4
 1581 0002 87B0     		sub	sp, sp, #28
 1582              	.LCFI41:
 1583              		.cfi_def_cfa_offset 32
 513:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1584              		.loc 1 513 0
 1585 0004 0023     		movs	r3, #0
 1586 0006 0293     		str	r3, [sp, #8]
 1587 0008 0393     		str	r3, [sp, #12]
 1588 000a 0493     		str	r3, [sp, #16]
 1589 000c 0593     		str	r3, [sp, #20]
 514:Core/Src/main.c **** 
 1590              		.loc 1 514 0
 1591 000e 0093     		str	r3, [sp]
 1592 0010 0193     		str	r3, [sp, #4]
 519:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 1593              		.loc 1 519 0
 1594 0012 1848     		ldr	r0, .L128
 1595 0014 184A     		ldr	r2, .L128+4
 1596 0016 0260     		str	r2, [r0]
ARM GAS  /tmp/ccXdlwYT.s 			page 47


 520:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1597              		.loc 1 520 0
 1598 0018 0122     		movs	r2, #1
 1599 001a 4260     		str	r2, [r0, #4]
 521:Core/Src/main.c ****   htim1.Init.Period = 95;
 1600              		.loc 1 521 0
 1601 001c 8360     		str	r3, [r0, #8]
 522:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1602              		.loc 1 522 0
 1603 001e 5F22     		movs	r2, #95
 1604 0020 C260     		str	r2, [r0, #12]
 523:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1605              		.loc 1 523 0
 1606 0022 0361     		str	r3, [r0, #16]
 524:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1607              		.loc 1 524 0
 1608 0024 4361     		str	r3, [r0, #20]
 525:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1609              		.loc 1 525 0
 1610 0026 8361     		str	r3, [r0, #24]
 526:Core/Src/main.c ****   {
 1611              		.loc 1 526 0
 1612 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1613              	.LVL142:
 1614 002c C8B9     		cbnz	r0, .L124
 530:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1615              		.loc 1 530 0
 1616 002e 06A9     		add	r1, sp, #24
 1617 0030 4FF48053 		mov	r3, #4096
 1618 0034 41F8103D 		str	r3, [r1, #-16]!
 531:Core/Src/main.c ****   {
 1619              		.loc 1 531 0
 1620 0038 0E48     		ldr	r0, .L128
 1621 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1622              	.LVL143:
 1623 003e 90B9     		cbnz	r0, .L125
 535:Core/Src/main.c ****   {
 1624              		.loc 1 535 0
 1625 0040 0821     		movs	r1, #8
 1626 0042 0C48     		ldr	r0, .L128
 1627 0044 FFF7FEFF 		bl	HAL_TIM_OnePulse_Init
 1628              	.LVL144:
 1629 0048 78B9     		cbnz	r0, .L126
 539:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 1630              		.loc 1 539 0
 1631 004a 2023     		movs	r3, #32
 1632 004c 0093     		str	r3, [sp]
 540:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1633              		.loc 1 540 0
 1634 004e 8023     		movs	r3, #128
 1635 0050 0193     		str	r3, [sp, #4]
 541:Core/Src/main.c ****   {
 1636              		.loc 1 541 0
 1637 0052 6946     		mov	r1, sp
 1638 0054 0748     		ldr	r0, .L128
 1639 0056 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1640              	.LVL145:
ARM GAS  /tmp/ccXdlwYT.s 			page 48


 1641 005a 40B9     		cbnz	r0, .L127
 549:Core/Src/main.c **** 
 1642              		.loc 1 549 0
 1643 005c 07B0     		add	sp, sp, #28
 1644              	.LCFI42:
 1645              		.cfi_remember_state
 1646              		.cfi_def_cfa_offset 4
 1647              		@ sp needed
 1648 005e 5DF804FB 		ldr	pc, [sp], #4
 1649              	.L124:
 1650              	.LCFI43:
 1651              		.cfi_restore_state
 528:Core/Src/main.c ****   }
 1652              		.loc 1 528 0
 1653 0062 FFF7FEFF 		bl	Error_Handler
 1654              	.LVL146:
 1655              	.L125:
 533:Core/Src/main.c ****   }
 1656              		.loc 1 533 0
 1657 0066 FFF7FEFF 		bl	Error_Handler
 1658              	.LVL147:
 1659              	.L126:
 537:Core/Src/main.c ****   }
 1660              		.loc 1 537 0
 1661 006a FFF7FEFF 		bl	Error_Handler
 1662              	.LVL148:
 1663              	.L127:
 543:Core/Src/main.c ****   }
 1664              		.loc 1 543 0
 1665 006e FFF7FEFF 		bl	Error_Handler
 1666              	.LVL149:
 1667              	.L129:
 1668 0072 00BF     		.align	2
 1669              	.L128:
 1670 0074 00000000 		.word	htim1
 1671 0078 00000140 		.word	1073807360
 1672              		.cfi_endproc
 1673              	.LFE232:
 1675              		.section	.text.SystemClock_Config,"ax",%progbits
 1676              		.align	1
 1677              		.global	SystemClock_Config
 1678              		.syntax unified
 1679              		.thumb
 1680              		.thumb_func
 1681              		.fpu fpv4-sp-d16
 1683              	SystemClock_Config:
 1684              	.LFB229:
 358:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1685              		.loc 1 358 0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 80
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
 1689 0000 00B5     		push	{lr}
 1690              	.LCFI44:
 1691              		.cfi_def_cfa_offset 4
 1692              		.cfi_offset 14, -4
 1693 0002 95B0     		sub	sp, sp, #84
ARM GAS  /tmp/ccXdlwYT.s 			page 49


 1694              	.LCFI45:
 1695              		.cfi_def_cfa_offset 88
 359:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1696              		.loc 1 359 0
 1697 0004 3422     		movs	r2, #52
 1698 0006 0021     		movs	r1, #0
 1699 0008 07A8     		add	r0, sp, #28
 1700 000a FFF7FEFF 		bl	memset
 1701              	.LVL150:
 360:Core/Src/main.c **** 
 1702              		.loc 1 360 0
 1703 000e 0023     		movs	r3, #0
 1704 0010 0293     		str	r3, [sp, #8]
 1705 0012 0393     		str	r3, [sp, #12]
 1706 0014 0493     		str	r3, [sp, #16]
 1707 0016 0593     		str	r3, [sp, #20]
 1708 0018 0693     		str	r3, [sp, #24]
 1709              	.LBB15:
 364:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1710              		.loc 1 364 0
 1711 001a 0093     		str	r3, [sp]
 1712 001c 1E4A     		ldr	r2, .L136
 1713 001e 116C     		ldr	r1, [r2, #64]
 1714 0020 41F08051 		orr	r1, r1, #268435456
 1715 0024 1164     		str	r1, [r2, #64]
 1716 0026 126C     		ldr	r2, [r2, #64]
 1717 0028 02F08052 		and	r2, r2, #268435456
 1718 002c 0092     		str	r2, [sp]
 1719 002e 009A     		ldr	r2, [sp]
 1720              	.LBE15:
 1721              	.LBB16:
 365:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1722              		.loc 1 365 0
 1723 0030 0193     		str	r3, [sp, #4]
 1724 0032 1A4A     		ldr	r2, .L136+4
 1725 0034 1168     		ldr	r1, [r2]
 1726 0036 41F44041 		orr	r1, r1, #49152
 1727 003a 1160     		str	r1, [r2]
 1728 003c 1268     		ldr	r2, [r2]
 1729 003e 02F44042 		and	r2, r2, #49152
 1730 0042 0192     		str	r2, [sp, #4]
 1731 0044 019A     		ldr	r2, [sp, #4]
 1732              	.LBE16:
 369:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1733              		.loc 1 369 0
 1734 0046 0222     		movs	r2, #2
 1735 0048 0792     		str	r2, [sp, #28]
 370:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1736              		.loc 1 370 0
 1737 004a 0121     		movs	r1, #1
 1738 004c 0A91     		str	r1, [sp, #40]
 371:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1739              		.loc 1 371 0
 1740 004e 1021     		movs	r1, #16
 1741 0050 0B91     		str	r1, [sp, #44]
 372:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1742              		.loc 1 372 0
ARM GAS  /tmp/ccXdlwYT.s 			page 50


 1743 0052 0D92     		str	r2, [sp, #52]
 373:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1744              		.loc 1 373 0
 1745 0054 0E93     		str	r3, [sp, #56]
 374:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 1746              		.loc 1 374 0
 1747 0056 0F91     		str	r1, [sp, #60]
 375:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1748              		.loc 1 375 0
 1749 0058 C023     		movs	r3, #192
 1750 005a 1093     		str	r3, [sp, #64]
 376:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1751              		.loc 1 376 0
 1752 005c 1192     		str	r2, [sp, #68]
 377:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1753              		.loc 1 377 0
 1754 005e 1292     		str	r2, [sp, #72]
 378:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1755              		.loc 1 378 0
 1756 0060 1392     		str	r2, [sp, #76]
 379:Core/Src/main.c ****   {
 1757              		.loc 1 379 0
 1758 0062 07A8     		add	r0, sp, #28
 1759 0064 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1760              	.LVL151:
 1761 0068 88B9     		cbnz	r0, .L134
 385:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1762              		.loc 1 385 0
 1763 006a 0F23     		movs	r3, #15
 1764 006c 0293     		str	r3, [sp, #8]
 387:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1765              		.loc 1 387 0
 1766 006e 0223     		movs	r3, #2
 1767 0070 0393     		str	r3, [sp, #12]
 388:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1768              		.loc 1 388 0
 1769 0072 0023     		movs	r3, #0
 1770 0074 0493     		str	r3, [sp, #16]
 389:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1771              		.loc 1 389 0
 1772 0076 4FF48052 		mov	r2, #4096
 1773 007a 0592     		str	r2, [sp, #20]
 390:Core/Src/main.c **** 
 1774              		.loc 1 390 0
 1775 007c 0693     		str	r3, [sp, #24]
 392:Core/Src/main.c ****   {
 1776              		.loc 1 392 0
 1777 007e 0321     		movs	r1, #3
 1778 0080 02A8     		add	r0, sp, #8
 1779 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1780              	.LVL152:
 1781 0086 20B9     		cbnz	r0, .L135
 396:Core/Src/main.c **** 
 1782              		.loc 1 396 0
 1783 0088 15B0     		add	sp, sp, #84
 1784              	.LCFI46:
 1785              		.cfi_remember_state
ARM GAS  /tmp/ccXdlwYT.s 			page 51


 1786              		.cfi_def_cfa_offset 4
 1787              		@ sp needed
 1788 008a 5DF804FB 		ldr	pc, [sp], #4
 1789              	.L134:
 1790              	.LCFI47:
 1791              		.cfi_restore_state
 381:Core/Src/main.c ****   }
 1792              		.loc 1 381 0
 1793 008e FFF7FEFF 		bl	Error_Handler
 1794              	.LVL153:
 1795              	.L135:
 394:Core/Src/main.c ****   }
 1796              		.loc 1 394 0
 1797 0092 FFF7FEFF 		bl	Error_Handler
 1798              	.LVL154:
 1799              	.L137:
 1800 0096 00BF     		.align	2
 1801              	.L136:
 1802 0098 00380240 		.word	1073887232
 1803 009c 00700040 		.word	1073770496
 1804              		.cfi_endproc
 1805              	.LFE229:
 1807              		.section	.text.main,"ax",%progbits
 1808              		.align	1
 1809              		.global	main
 1810              		.syntax unified
 1811              		.thumb
 1812              		.thumb_func
 1813              		.fpu fpv4-sp-d16
 1815              	main:
 1816              	.LFB228:
 305:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1817              		.loc 1 305 0
 1818              		.cfi_startproc
 1819              		@ Volatile: function does not return.
 1820              		@ args = 0, pretend = 0, frame = 0
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 1822 0000 08B5     		push	{r3, lr}
 1823              	.LCFI48:
 1824              		.cfi_def_cfa_offset 8
 1825              		.cfi_offset 3, -8
 1826              		.cfi_offset 14, -4
 313:Core/Src/main.c **** 
 1827              		.loc 1 313 0
 1828 0002 FFF7FEFF 		bl	HAL_Init
 1829              	.LVL155:
 317:Core/Src/main.c **** 
 1830              		.loc 1 317 0
 1831 0006 FFF7FEFF 		bl	prog_init
 1832              	.LVL156:
 322:Core/Src/main.c **** 
 1833              		.loc 1 322 0
 1834 000a FFF7FEFF 		bl	SystemClock_Config
 1835              	.LVL157:
 329:Core/Src/main.c ****   MX_DMA_Init();
 1836              		.loc 1 329 0
 1837 000e FFF7FEFF 		bl	MX_GPIO_Init
ARM GAS  /tmp/ccXdlwYT.s 			page 52


 1838              	.LVL158:
 330:Core/Src/main.c ****   MX_DAC_Init();
 1839              		.loc 1 330 0
 1840 0012 FFF7FEFF 		bl	MX_DMA_Init
 1841              	.LVL159:
 331:Core/Src/main.c ****   MX_USART3_UART_Init();
 1842              		.loc 1 331 0
 1843 0016 FFF7FEFF 		bl	MX_DAC_Init
 1844              	.LVL160:
 332:Core/Src/main.c ****   MX_TIM1_Init();
 1845              		.loc 1 332 0
 1846 001a FFF7FEFF 		bl	MX_USART3_UART_Init
 1847              	.LVL161:
 333:Core/Src/main.c ****   MX_TIM2_Init();
 1848              		.loc 1 333 0
 1849 001e FFF7FEFF 		bl	MX_TIM1_Init
 1850              	.LVL162:
 334:Core/Src/main.c ****   MX_ADC1_Init();
 1851              		.loc 1 334 0
 1852 0022 FFF7FEFF 		bl	MX_TIM2_Init
 1853              	.LVL163:
 335:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1854              		.loc 1 335 0
 1855 0026 FFF7FEFF 		bl	MX_ADC1_Init
 1856              	.LVL164:
 337:Core/Src/main.c ****   measure();
 1857              		.loc 1 337 0
 1858 002a 0021     		movs	r1, #0
 1859 002c 0348     		ldr	r0, .L141
 1860 002e FFF7FEFF 		bl	HAL_DAC_Start
 1861              	.LVL165:
 338:Core/Src/main.c **** //  read_ADC_values(1000);
 1862              		.loc 1 338 0
 1863 0032 FFF7FEFF 		bl	measure
 1864              	.LVL166:
 1865              	.L139:
 345:Core/Src/main.c ****     /* USER CODE END WHILE */
 1866              		.loc 1 345 0 discriminator 1
 1867 0036 FFF7FEFF 		bl	loop
 1868              	.LVL167:
 1869 003a FCE7     		b	.L139
 1870              	.L142:
 1871              		.align	2
 1872              	.L141:
 1873 003c 00000000 		.word	hdac
 1874              		.cfi_endproc
 1875              	.LFE228:
 1877              		.global	_avgn
 1878              		.global	_cur_min
 1879              		.global	_cur_max
 1880              		.global	_time_on
 1881              		.global	_timestep
 1882              		.comm	huart3,68,4
 1883              		.comm	htim2,72,4
 1884              		.comm	htim1,72,4
 1885              		.comm	hdma_dac1,96,4
 1886              		.comm	hdac,20,4
ARM GAS  /tmp/ccXdlwYT.s 			page 53


 1887              		.comm	hdma_adc1,96,4
 1888              		.comm	hadc1,72,4
 1889              		.section	.bss.ADC_array,"aw",%nobits
 1890              		.align	2
 1891              		.set	.LANCHOR1,. + 0
 1894              	ADC_array:
 1895 0000 00000000 		.space	2048
 1895      00000000 
 1895      00000000 
 1895      00000000 
 1895      00000000 
 1896              		.section	.bss.ADC_res,"aw",%nobits
 1897              		.align	1
 1900              	ADC_res:
 1901 0000 0000     		.space	2
 1902              		.section	.bss.DAC_array,"aw",%nobits
 1903              		.align	2
 1904              		.set	.LANCHOR2,. + 0
 1907              	DAC_array:
 1908 0000 00000000 		.space	2048
 1908      00000000 
 1908      00000000 
 1908      00000000 
 1908      00000000 
 1909              		.section	.bss.Receive_array,"aw",%nobits
 1910              		.align	2
 1911              		.set	.LANCHOR8,. + 0
 1914              	Receive_array:
 1915 0000 00000000 		.space	255
 1915      00000000 
 1915      00000000 
 1915      00000000 
 1915      00000000 
 1916              		.section	.bss.Transmit_array,"aw",%nobits
 1917              		.align	2
 1918              		.set	.LANCHOR0,. + 0
 1921              	Transmit_array:
 1922 0000 00000000 		.space	1024
 1922      00000000 
 1922      00000000 
 1922      00000000 
 1922      00000000 
 1923              		.section	.bss._cur_min,"aw",%nobits
 1924              		.align	1
 1925              		.set	.LANCHOR6,. + 0
 1928              	_cur_min:
 1929 0000 0000     		.space	2
 1930              		.section	.data._avgn,"aw",%progbits
 1931              		.set	.LANCHOR7,. + 0
 1934              	_avgn:
 1935 0000 01       		.byte	1
 1936              		.section	.data._cur_max,"aw",%progbits
 1937              		.align	1
 1938              		.set	.LANCHOR4,. + 0
 1941              	_cur_max:
 1942 0000 D007     		.short	2000
 1943              		.section	.data._time_on,"aw",%progbits
ARM GAS  /tmp/ccXdlwYT.s 			page 54


 1944              		.align	1
 1945              		.set	.LANCHOR5,. + 0
 1948              	_time_on:
 1949 0000 F401     		.short	500
 1950              		.section	.data._timestep,"aw",%progbits
 1951              		.set	.LANCHOR3,. + 0
 1954              	_timestep:
 1955 0000 01       		.byte	1
 1956              		.section	.rodata.get_num.str1.4,"aMS",%progbits,1
 1957              		.align	2
 1958              	.LC0:
 1959 0000 73746570 		.ascii	"step0.5\000"
 1959      302E3500 
 1960              		.section	.rodata.z_func.str1.4,"aMS",%progbits,1
 1961              		.align	2
 1962              	.LC6:
 1963 0000 733E0A00 		.ascii	"s>\012\000"
 1964              	.LC1:
 1965 0004 73746570 		.ascii	"step\000"
 1965      00
 1966 0009 000000   		.space	3
 1967              	.LC2:
 1968 000c 73746172 		.ascii	"start\000"
 1968      7400
 1969 0012 0000     		.space	2
 1970              	.LC3:
 1971 0014 6C6F6164 		.ascii	"loadb\000"
 1971      6200
 1972 001a 0000     		.space	2
 1973              	.LC4:
 1974 001c 6261636B 		.ascii	"back\000"
 1974      00
 1975 0021 000000   		.space	3
 1976              	.LC5:
 1977 0024 6176676E 		.ascii	"avgn\000"
 1977      00
 1978              		.text
 1979              	.Letext0:
 1980              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1981              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1982              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 1983              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1984              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 1985              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1986              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1987              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1988              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1989              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1990              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1991              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1992              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dac.h"
 1993              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1994              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1995              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1996              		.file 19 "Core/Inc/stm32f4xx_nucleo_144.h"
 1997              		.file 20 "/usr/include/newlib/sys/lock.h"
 1998              		.file 21 "/usr/include/newlib/sys/_types.h"
ARM GAS  /tmp/ccXdlwYT.s 			page 55


 1999              		.file 22 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 2000              		.file 23 "/usr/include/newlib/sys/reent.h"
 2001              		.file 24 "/usr/include/newlib/stdlib.h"
 2002              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2003              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 2004              		.file 27 "/usr/include/newlib/string.h"
 2005              		.file 28 "<built-in>"
ARM GAS  /tmp/ccXdlwYT.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccXdlwYT.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccXdlwYT.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccXdlwYT.s:112    .text.MX_GPIO_Init:0000000000000074 $d
     /tmp/ccXdlwYT.s:118    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccXdlwYT.s:124    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccXdlwYT.s:191    .text.MX_DMA_Init:0000000000000054 $d
     /tmp/ccXdlwYT.s:196    .text.prog_init:0000000000000000 $t
     /tmp/ccXdlwYT.s:203    .text.prog_init:0000000000000000 prog_init
     /tmp/ccXdlwYT.s:248    .text.blink:0000000000000000 $t
     /tmp/ccXdlwYT.s:255    .text.blink:0000000000000000 blink
     /tmp/ccXdlwYT.s:315    .text.send_back:0000000000000000 $t
     /tmp/ccXdlwYT.s:322    .text.send_back:0000000000000000 send_back
     /tmp/ccXdlwYT.s:346    .text.send_back:0000000000000014 $d
                            *COM*:0000000000000044 huart3
     /tmp/ccXdlwYT.s:352    .text.read_ADC_values:0000000000000000 $t
     /tmp/ccXdlwYT.s:359    .text.read_ADC_values:0000000000000000 read_ADC_values
     /tmp/ccXdlwYT.s:420    .text.read_ADC_values:0000000000000048 $d
                            *COM*:0000000000000048 hadc1
                            *COM*:0000000000000014 hdac
                            *COM*:0000000000000048 htim2
     /tmp/ccXdlwYT.s:430    .text.get_num:0000000000000000 $t
     /tmp/ccXdlwYT.s:437    .text.get_num:0000000000000000 get_num
     /tmp/ccXdlwYT.s:547    .text.get_num:0000000000000060 $d
     /tmp/ccXdlwYT.s:552    .text.send_result:0000000000000000 $t
     /tmp/ccXdlwYT.s:559    .text.send_result:0000000000000000 send_result
     /tmp/ccXdlwYT.s:597    .text.send_result:0000000000000024 $d
     /tmp/ccXdlwYT.s:602    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccXdlwYT.s:609    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccXdlwYT.s:633    .text.HAL_ADC_ConvCpltCallback:0000000000000010 $d
     /tmp/ccXdlwYT.s:638    .text.Error_Handler:0000000000000000 $t
     /tmp/ccXdlwYT.s:645    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccXdlwYT.s:671    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccXdlwYT.s:677    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccXdlwYT.s:779    .text.MX_ADC1_Init:000000000000007c $d
     /tmp/ccXdlwYT.s:786    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccXdlwYT.s:792    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccXdlwYT.s:884    .text.MX_TIM2_Init:0000000000000068 $d
     /tmp/ccXdlwYT.s:890    .text.measure:0000000000000000 $t
     /tmp/ccXdlwYT.s:897    .text.measure:0000000000000000 measure
     /tmp/ccXdlwYT.s:1017   .text.measure:0000000000000090 $d
     /tmp/ccXdlwYT.s:1031   .text.z_func:0000000000000000 $t
     /tmp/ccXdlwYT.s:1038   .text.z_func:0000000000000000 z_func
     /tmp/ccXdlwYT.s:1314   .text.z_func:0000000000000178 $d
     /tmp/ccXdlwYT.s:1335   .text.try_to_read:0000000000000000 $t
     /tmp/ccXdlwYT.s:1342   .text.try_to_read:0000000000000000 try_to_read
     /tmp/ccXdlwYT.s:1405   .text.try_to_read:0000000000000040 $d
     /tmp/ccXdlwYT.s:1412   .text.loop:0000000000000000 $t
     /tmp/ccXdlwYT.s:1419   .text.loop:0000000000000000 loop
     /tmp/ccXdlwYT.s:1439   .text.MX_DAC_Init:0000000000000000 $t
     /tmp/ccXdlwYT.s:1445   .text.MX_DAC_Init:0000000000000000 MX_DAC_Init
     /tmp/ccXdlwYT.s:1502   .text.MX_DAC_Init:0000000000000038 $d
     /tmp/ccXdlwYT.s:1508   .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccXdlwYT.s:1514   .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccXdlwYT.s:1559   .text.MX_USART3_UART_Init:000000000000002c $d
     /tmp/ccXdlwYT.s:1565   .text.MX_TIM1_Init:0000000000000000 $t
ARM GAS  /tmp/ccXdlwYT.s 			page 57


     /tmp/ccXdlwYT.s:1571   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccXdlwYT.s:1670   .text.MX_TIM1_Init:0000000000000074 $d
                            *COM*:0000000000000048 htim1
     /tmp/ccXdlwYT.s:1676   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccXdlwYT.s:1683   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccXdlwYT.s:1802   .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccXdlwYT.s:1808   .text.main:0000000000000000 $t
     /tmp/ccXdlwYT.s:1815   .text.main:0000000000000000 main
     /tmp/ccXdlwYT.s:1873   .text.main:000000000000003c $d
     /tmp/ccXdlwYT.s:1934   .data._avgn:0000000000000000 _avgn
     /tmp/ccXdlwYT.s:1928   .bss._cur_min:0000000000000000 _cur_min
     /tmp/ccXdlwYT.s:1941   .data._cur_max:0000000000000000 _cur_max
     /tmp/ccXdlwYT.s:1948   .data._time_on:0000000000000000 _time_on
     /tmp/ccXdlwYT.s:1954   .data._timestep:0000000000000000 _timestep
                            *COM*:0000000000000060 hdma_dac1
                            *COM*:0000000000000060 hdma_adc1
     /tmp/ccXdlwYT.s:1890   .bss.ADC_array:0000000000000000 $d
     /tmp/ccXdlwYT.s:1894   .bss.ADC_array:0000000000000000 ADC_array
     /tmp/ccXdlwYT.s:1897   .bss.ADC_res:0000000000000000 $d
     /tmp/ccXdlwYT.s:1900   .bss.ADC_res:0000000000000000 ADC_res
     /tmp/ccXdlwYT.s:1903   .bss.DAC_array:0000000000000000 $d
     /tmp/ccXdlwYT.s:1907   .bss.DAC_array:0000000000000000 DAC_array
     /tmp/ccXdlwYT.s:1910   .bss.Receive_array:0000000000000000 $d
     /tmp/ccXdlwYT.s:1914   .bss.Receive_array:0000000000000000 Receive_array
     /tmp/ccXdlwYT.s:1917   .bss.Transmit_array:0000000000000000 $d
     /tmp/ccXdlwYT.s:1921   .bss.Transmit_array:0000000000000000 Transmit_array
     /tmp/ccXdlwYT.s:1924   .bss._cur_min:0000000000000000 $d
     /tmp/ccXdlwYT.s:1937   .data._cur_max:0000000000000000 $d
     /tmp/ccXdlwYT.s:1944   .data._time_on:0000000000000000 $d
     /tmp/ccXdlwYT.s:1957   .rodata.get_num.str1.4:0000000000000000 $d
     /tmp/ccXdlwYT.s:1961   .rodata.z_func.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
BSP_LED_Init
BSP_LED_On
HAL_Delay
BSP_LED_Off
HAL_UART_Transmit
HAL_ADC_Start_DMA
HAL_DAC_Start_DMA
HAL_TIM_Base_Start
HAL_TIM_Base_Stop
strlen
memset
strstr
atoi
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
__aeabi_i2d
__aeabi_dmul
ARM GAS  /tmp/ccXdlwYT.s 			page 58


__aeabi_d2uiz
HAL_UART_Receive
HAL_DAC_Init
HAL_DAC_ConfigChannel
HAL_UART_Init
HAL_TIM_OnePulse_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_DAC_Start
